import numpy as np
import matplotlib.pyplot as plt
import sys
sys.path.append("D:\\MPE\\COMPTEL_Simulation_Project\\Werkstudent\\Python_Code/")

import reading_data as rd
from scipy.optimize import minimize
import h5py
##
from numba import njit,vectorize,prange




def create_h5py_dataset(include_simulated_data=True):
    with h5py.File("SRF.hdf5","w") as h5:
        
        ## Cross Sections
        CS = h5.create_group("Cross-Sections")
        CS.attrs.__setitem__("Units","Energy [MeV], Coh. Scat., Inc. Scat, Photel. Abs., Nucl. Pr. Prd., Elec. Pr. Prd., Tot. w/ Coh., Tot. wo/ Coh. [cm2/g]")
        
        CS.create_dataset("Na",data=Na)
        CS.create_dataset("I",data=I)
        CS.create_dataset("Tl",data=Tl)
        CS.create_dataset("NaI",data=merge_NaI())
        
        # Klein Nishina Cross Section
        KN = h5.create_group("Cross-Sections/Klein-Nishina")
        KN.create_dataset("KN_CS",data=calc_total_kn_cs_gauss())
        KN.attrs.__setitem__("Energies","E1s=np.geomspace(0.001,100,1000) [MeV]")
        KN.attrs.__setitem__("Units","Non-normalized total cross section")
        
        
        ## COMPTEL Data
        # D2 Photopeak Ratio
        PPR = h5.create_group("COMPTEL/Photopeak Ratio")
        PPR.create_dataset("D2_PPR",data=D2_cell_photopeak_ratio(np.geomspace(0.01,100,1000)))
        PPR.attrs.__setitem__("Energies","E1s=np.geomspace(0.01,100,1000) [MeV]")
        
        # Simulated Data
        SD = h5.create_group("COMPTEL/Simulated Data")
        if include_simulated_data:
            E_samples=(1.5,5.0,15.0)
            p='D:\\MPE\\COMPTEL_Simulation_Project\\Werkstudent\\Data_from_Simulations\\Thesis_Simulations/'
            
            for i,E in enumerate(E_samples):
                d=rd.read_h5py_file( p+"Mono_{E}/".format(E=int(E*1000)), "Mono_{E}_h5".format(E=int(E*1000)) )
                d=rd.cut_selection(d,9,0,True)
                
                E2s = E - d[:,3]/1000
                E2s_r=d[:,1]/1000
                
                SD.create_dataset("Mono_{E}_Counts".format(E=int(E*1000)), data=E2s_r)
                SD.create_dataset("Mono_{E}_Incidence".format(E=int(E*1000)), data=E2s)
                
            SD.attrs.__setitem__("Units","[MeV]")
        
        
        ## GBM Data
        # Data Set
        GBM = h5.create_group("GBM")
        Mn_d = GBM.create_dataset("FM01_00182_Mn_54",data=read_GBM_file("4096_FM01-00182_Backsub_Mn_54.txt"))
        Mn_d.attrs.__setitem__("Peak_Energy", 0.83484)
        Mn_d.attrs.__setitem__("Photopeak_Ratio", 0.153997)
        Mn_d.attrs.__setitem__("Peak_Sigma", 3.83835679e-02)
        
        Na_d = GBM.create_dataset("FM03-00265_Na_22",data=read_GBM_file("4096_FM03-00265_Backsub_Na_22.txt"))
        Na_d.attrs.__setitem__("Peak_Energy", 0.511)
        Na_d.attrs.__setitem__("Photopeak_Ratio", 0.207025)
        Na_d.attrs.__setitem__("Peak_Sigma", 2.44647567e-02)

        
        

### Cross Sections

#Energy [MeV], Coh. Scat., Inc. Scat, Photel. Abs., Nucl. Pr. Prd., Elec. Pr. Prd., Tot. w/ Coh., Tot. wo/ Coh. [cm2/g]
Na=np.array([1.000E-03,1.919E+00,1.270E-02,6.523E+02,0.000E+00,0.000E+00,6.542E+02,6.523E+02,
    1.035E-03,1.909E+00,1.326E-02,5.939E+02,0.000E+00,0.000E+00,5.958E+02,5.939E+02,
    1.072E-03,1.898E+00,1.384E-02,5.412E+02,0.000E+00,0.000E+00,5.431E+02,5.412E+02,
    1.072E-03,1.898E+00,1.384E-02,6.433E+03,0.000E+00,0.000E+00,6.435E+03,6.433E+03,
    1.500E-03,1.775E+00,1.994E-02,3.193E+03,0.000E+00,0.000E+00,3.195E+03,3.193E+03,
    2.000E-03,1.641E+00,2.638E-02,1.519E+03,0.000E+00,0.000E+00,1.521E+03,1.519E+03,
    3.000E-03,1.403E+00,3.948E-02,5.056E+02,0.000E+00,0.000E+00,5.070E+02,5.056E+02,
    4.000E-03,1.185E+00,5.284E-02,2.249E+02,0.000E+00,0.000E+00,2.261E+02,2.250E+02,
    5.000E-03,9.925E-01,6.557E-02,1.183E+02,0.000E+00,0.000E+00,1.194E+02,1.184E+02,
    6.000E-03,8.306E-01,7.717E-02,6.939E+01,0.000E+00,0.000E+00,7.030E+01,6.947E+01,
    8.000E-03,5.931E-01,9.624E-02,2.950E+01,0.000E+00,0.000E+00,3.018E+01,2.959E+01,
    1.000E-02,4.409E-01,1.101E-01,1.502E+01,0.000E+00,0.000E+00,1.557E+01,1.513E+01,
    1.500E-02,2.470E-01,1.300E-01,4.317E+00,0.000E+00,0.000E+00,4.694E+00,4.447E+00,
    2.000E-02,1.612E-01,1.397E-01,1.756E+00,0.000E+00,0.000E+00,2.057E+00,1.896E+00,
    3.000E-02,8.597E-02,1.484E-01,4.854E-01,0.000E+00,0.000E+00,7.198E-01,6.338E-01,
    4.000E-02,5.325E-02,1.509E-01,1.927E-01,0.000E+00,0.000E+00,3.969E-01,3.437E-01,
    5.000E-02,3.607E-02,1.506E-01,9.370E-02,0.000E+00,0.000E+00,2.804E-01,2.443E-01,
    6.000E-02,2.600E-02,1.489E-01,5.187E-02,0.000E+00,0.000E+00,2.268E-01,2.008E-01,
    8.000E-02,1.533E-02,1.440E-01,2.032E-02,0.000E+00,0.000E+00,1.796E-01,1.643E-01,
    1.000E-01,1.009E-02,1.386E-01,9.826E-03,0.000E+00,0.000E+00,1.585E-01,1.484E-01,
    1.500E-01,4.642E-03,1.262E-01,2.638E-03,0.000E+00,0.000E+00,1.335E-01,1.289E-01,
    2.000E-01,2.648E-03,1.162E-01,1.053E-03,0.000E+00,0.000E+00,1.199E-01,1.173E-01,
    3.000E-01,1.191E-03,1.015E-01,2.999E-04,0.000E+00,0.000E+00,1.029E-01,1.018E-01,
    4.000E-01,6.727E-04,9.105E-02,1.292E-04,0.000E+00,0.000E+00,9.186E-02,9.118E-02,
    5.000E-01,4.314E-04,8.322E-02,6.989E-05,0.000E+00,0.000E+00,8.372E-02,8.329E-02,
    6.000E-01,2.999E-04,7.701E-02,4.359E-05,0.000E+00,0.000E+00,7.736E-02,7.706E-02,
    8.000E-01,1.689E-04,6.769E-02,2.203E-05,0.000E+00,0.000E+00,6.788E-02,6.771E-02,
    1.000E+00,1.081E-04,6.088E-02,1.369E-05,0.000E+00,0.000E+00,6.100E-02,6.089E-02,
    1.022E+00,1.035E-04,6.022E-02,1.287E-05,0.000E+00,0.000E+00,6.034E-02,6.023E-02,
    1.250E+00,6.923E-05,5.443E-02,8.731E-06,2.585E-05,0.000E+00,5.454E-02,5.447E-02,
    1.500E+00,4.809E-05,4.948E-02,6.329E-06,1.421E-04,0.000E+00,4.968E-02,4.963E-02,
    2.000E+00,2.706E-05,4.223E-02,3.963E-06,5.640E-04,0.000E+00,4.282E-02,4.279E-02,
    2.044E+00,2.590E-05,4.170E-02,3.832E-06,6.080E-04,0.000E+00,4.234E-02,4.231E-02,
    3.000E+00,1.202E-05,3.324E-02,2.200E-06,1.608E-03,1.163E-05,3.488E-02,3.486E-02,
    4.000E+00,6.764E-06,2.771E-02,1.504E-06,2.604E-03,4.747E-05,3.037E-02,3.037E-02,
    5.000E+00,4.330E-06,2.394E-02,1.138E-06,3.492E-03,9.459E-05,2.753E-02,2.752E-02,
    6.000E+00,3.007E-06,2.116E-02,9.132E-07,4.285E-03,1.453E-04,2.559E-02,2.559E-02,
    7.000E+00,2.209E-06,1.902E-02,7.617E-07,4.993E-03,1.959E-04,2.421E-02,2.421E-02,
    8.000E+00,1.691E-06,1.731E-02,6.530E-07,5.632E-03,2.450E-04,2.319E-02,2.318E-02,
    9.000E+00,1.336E-06,1.591E-02,5.713E-07,6.208E-03,2.921E-04,2.241E-02,2.241E-02,
    1.000E+01,1.082E-06,1.474E-02,5.074E-07,6.735E-03,3.369E-04,2.181E-02,2.181E-02,
    1.100E+01,8.946E-07,1.375E-02,4.566E-07,7.211E-03,3.796E-04,2.134E-02,2.134E-02,
    1.200E+01,7.515E-07,1.289E-02,4.147E-07,7.649E-03,4.199E-04,2.096E-02,2.096E-02,
    1.300E+01,6.405E-07,1.215E-02,3.801E-07,8.055E-03,4.579E-04,2.066E-02,2.066E-02,
    1.400E+01,5.522E-07,1.149E-02,3.505E-07,8.432E-03,4.940E-04,2.042E-02,2.042E-02,
    1.500E+01,4.809E-07,1.091E-02,3.253E-07,8.786E-03,5.286E-04,2.023E-02,2.022E-02,
    1.600E+01,4.228E-07,1.039E-02,3.036E-07,9.116E-03,5.614E-04,2.007E-02,2.007E-02,
    1.800E+01,3.340E-07,9.496E-03,2.674E-07,9.724E-03,6.224E-04,1.984E-02,1.984E-02,
    2.000E+01,2.706E-07,8.757E-03,2.392E-07,1.027E-02,6.782E-04,1.970E-02,1.970E-02,
    2.200E+01,2.236E-07,8.134E-03,2.163E-07,1.076E-02,7.295E-04,1.962E-02,1.962E-02,
    2.400E+01,1.879E-07,7.599E-03,1.974E-07,1.121E-02,7.769E-04,1.959E-02,1.959E-02,
    2.600E+01,1.601E-07,7.135E-03,1.815E-07,1.162E-02,8.212E-04,1.957E-02,1.957E-02,
    2.800E+01,1.380E-07,6.732E-03,1.680E-07,1.200E-02,8.621E-04,1.959E-02,1.959E-02,
    3.000E+01,1.203E-07,6.376E-03,1.563E-07,1.235E-02,9.006E-04,1.962E-02,1.962E-02,
    4.000E+01,6.764E-08,5.066E-03,1.160E-07,1.379E-02,1.062E-03,1.992E-02,1.992E-02,
    5.000E+01,4.330E-08,4.228E-03,9.228E-08,1.488E-02,1.187E-03,2.029E-02,2.029E-02,
    6.000E+01,3.007E-08,3.644E-03,7.659E-08,1.574E-02,1.287E-03,2.067E-02,2.067E-02,
    8.000E+01,1.691E-08,2.874E-03,5.716E-08,1.703E-02,1.443E-03,2.135E-02,2.135E-02,
    1.000E+02,1.082E-08,2.385E-03,4.558E-08,1.796E-02,1.559E-03,2.191E-02,2.191E-02])
Na=Na.reshape((int(len(Na)/8),8))

I=np.array([1.000E-03,8.418E+00,4.688E-03,9.087E+03,0.000E+00,0.000E+00,9.096E+03,9.087E+03,
    1.035E-03,8.388E+00,4.972E-03,8.450E+03,0.000E+00,0.000E+00,8.458E+03,8.450E+03,
    1.072E-03,8.357E+00,5.272E-03,7.858E+03,0.000E+00,0.000E+00,7.867E+03,7.858E+03,
    1.072E-03,8.357E+00,5.272E-03,8.195E+03,0.000E+00,0.000E+00,8.204E+03,8.195E+03,
    1.500E-03,7.958E+00,8.969E-03,3.911E+03,0.000E+00,0.000E+00,3.919E+03,3.911E+03,
    2.000E-03,7.446E+00,1.342E-02,1.989E+03,0.000E+00,0.000E+00,1.997E+03,1.989E+03,
    3.000E-03,6.463E+00,2.190E-02,7.355E+02,0.000E+00,0.000E+00,7.420E+02,7.356E+02,
    4.000E-03,5.628E+00,2.932E-02,3.551E+02,0.000E+00,0.000E+00,3.608E+02,3.551E+02,
    4.557E-03,5.229E+00,3.296E-02,2.539E+02,0.000E+00,0.000E+00,2.591E+02,2.539E+02,
    4.557E-03,5.229E+00,3.296E-02,7.498E+02,0.000E+00,0.000E+00,7.550E+02,7.498E+02,
    4.702E-03,5.133E+00,3.387E-02,7.027E+02,0.000E+00,0.000E+00,7.079E+02,7.027E+02,
    4.852E-03,5.035E+00,3.479E-02,6.587E+02,0.000E+00,0.000E+00,6.637E+02,6.587E+02,
    4.852E-03,5.035E+00,3.479E-02,8.883E+02,0.000E+00,0.000E+00,8.934E+02,8.884E+02,
    5.000E-03,4.940E+00,3.568E-02,8.380E+02,0.000E+00,0.000E+00,8.430E+02,8.381E+02,
    5.188E-03,4.821E+00,3.679E-02,7.616E+02,0.000E+00,0.000E+00,7.665E+02,7.617E+02,
    5.188E-03,4.821E+00,3.679E-02,8.788E+02,0.000E+00,0.000E+00,8.837E+02,8.789E+02,
    6.000E-03,4.356E+00,4.129E-02,6.131E+02,0.000E+00,0.000E+00,6.175E+02,6.131E+02,
    8.000E-03,3.446E+00,5.106E-02,2.886E+02,0.000E+00,0.000E+00,2.921E+02,2.887E+02,
    1.000E-02,2.798E+00,5.955E-02,1.597E+02,0.000E+00,0.000E+00,1.626E+02,1.598E+02,
    1.500E-02,1.843E+00,7.578E-02,5.320E+01,0.000E+00,0.000E+00,5.511E+01,5.327E+01,
    2.000E-02,1.312E+00,8.646E-02,2.404E+01,0.000E+00,0.000E+00,2.543E+01,2.412E+01,
    3.000E-02,7.455E-01,9.908E-02,7.716E+00,0.000E+00,0.000E+00,8.561E+00,7.815E+00,
    3.317E-02,6.430E-01,1.016E-01,5.808E+00,0.000E+00,0.000E+00,6.553E+00,5.910E+00,
    3.317E-02,6.430E-01,1.016E-01,3.508E+01,0.000E+00,0.000E+00,3.583E+01,3.518E+01,
    4.000E-02,4.859E-01,1.057E-01,2.151E+01,0.000E+00,0.000E+00,2.210E+01,2.161E+01,
    5.000E-02,3.452E-01,1.093E-01,1.187E+01,0.000E+00,0.000E+00,1.232E+01,1.198E+01,
    6.000E-02,2.577E-01,1.110E-01,7.208E+00,0.000E+00,0.000E+00,7.577E+00,7.319E+00,
    8.000E-02,1.584E-01,1.115E-01,3.240E+00,0.000E+00,0.000E+00,3.510E+00,3.352E+00,
    1.000E-01,1.073E-01,1.100E-01,1.725E+00,0.000E+00,0.000E+00,1.942E+00,1.835E+00,
    1.500E-01,5.220E-02,1.036E-01,5.419E-01,0.000E+00,0.000E+00,6.978E-01,6.456E-01,
    2.000E-01,3.087E-02,9.709E-02,2.383E-01,0.000E+00,0.000E+00,3.663E-01,3.354E-01,
    3.000E-01,1.440E-02,8.627E-02,7.650E-02,0.000E+00,0.000E+00,1.772E-01,1.628E-01,
    4.000E-01,8.295E-03,7.811E-02,3.525E-02,0.000E+00,0.000E+00,1.217E-01,1.134E-01,
    5.000E-01,5.381E-03,7.175E-02,1.988E-02,0.000E+00,0.000E+00,9.701E-02,9.163E-02,
    6.000E-01,3.771E-03,6.663E-02,1.274E-02,0.000E+00,0.000E+00,8.313E-02,7.936E-02,
    8.000E-01,2.143E-03,5.875E-02,6.596E-03,0.000E+00,0.000E+00,6.749E-02,6.534E-02,
    1.000E+00,1.379E-03,5.291E-02,4.120E-03,0.000E+00,0.000E+00,5.841E-02,5.703E-02,
    1.022E+00,1.321E-03,5.234E-02,3.922E-03,0.000E+00,0.000E+00,5.759E-02,5.626E-02,
    1.250E+00,8.860E-04,4.737E-02,2.645E-03,1.883E-04,0.000E+00,5.109E-02,5.021E-02,
    1.500E+00,6.164E-04,4.309E-02,1.893E-03,8.713E-04,0.000E+00,4.647E-02,4.586E-02,
    2.000E+00,3.476E-04,3.681E-02,1.152E-03,2.939E-03,0.000E+00,4.124E-02,4.090E-02,
    2.044E+00,3.329E-04,3.635E-02,1.111E-03,3.139E-03,0.000E+00,4.094E-02,4.061E-02,
    3.000E+00,1.547E-04,2.898E-02,6.112E-04,7.408E-03,1.014E-05,3.716E-02,3.701E-02,
    4.000E+00,8.713E-05,2.418E-02,4.046E-04,1.136E-02,4.134E-05,3.607E-02,3.598E-02,
    5.000E+00,5.576E-05,2.088E-02,2.992E-04,1.476E-02,8.229E-05,3.608E-02,3.602E-02,
    6.000E+00,3.873E-05,1.846E-02,2.361E-04,1.769E-02,1.262E-04,3.655E-02,3.651E-02,
    7.000E+00,2.846E-05,1.659E-02,1.944E-04,2.030E-02,1.700E-04,3.729E-02,3.726E-02,
    8.000E+00,2.179E-05,1.510E-02,1.650E-04,2.265E-02,2.123E-04,3.815E-02,3.813E-02,
    9.000E+00,1.722E-05,1.389E-02,1.431E-04,2.478E-02,2.528E-04,3.907E-02,3.906E-02,
    1.000E+01,1.395E-05,1.286E-02,1.262E-04,2.673E-02,2.913E-04,4.002E-02,4.001E-02,
    1.100E+01,1.153E-05,1.200E-02,1.129E-04,2.852E-02,3.276E-04,4.097E-02,4.096E-02,
    1.200E+01,9.685E-06,1.125E-02,1.021E-04,3.019E-02,3.619E-04,4.192E-02,4.191E-02,
    1.300E+01,8.252E-06,1.060E-02,9.310E-05,3.174E-02,3.942E-04,4.283E-02,4.283E-02,
    1.400E+01,7.118E-06,1.003E-02,8.556E-05,3.316E-02,4.249E-04,4.371E-02,4.370E-02,
    1.500E+01,6.198E-06,9.524E-03,7.915E-05,3.448E-02,4.539E-04,4.455E-02,4.454E-02,
    1.600E+01,5.448E-06,9.068E-03,7.365E-05,3.571E-02,4.817E-04,4.534E-02,4.533E-02,
    1.800E+01,4.305E-06,8.285E-03,6.459E-05,3.794E-02,5.324E-04,4.683E-02,4.683E-02,
    2.000E+01,3.487E-06,7.640E-03,5.751E-05,3.995E-02,5.789E-04,4.823E-02,4.823E-02,
    2.200E+01,2.882E-06,7.099E-03,5.182E-05,4.177E-02,6.216E-04,4.954E-02,4.954E-02,
    2.400E+01,2.422E-06,6.634E-03,4.717E-05,4.342E-02,6.606E-04,5.076E-02,5.076E-02,
    2.600E+01,2.063E-06,6.231E-03,4.327E-05,4.493E-02,6.966E-04,5.190E-02,5.190E-02,
    2.800E+01,1.779E-06,5.875E-03,3.996E-05,4.631E-02,7.298E-04,5.295E-02,5.295E-02,
    3.000E+01,1.550E-06,5.562E-03,3.712E-05,4.760E-02,7.612E-04,5.396E-02,5.396E-02,
    4.000E+01,8.717E-07,4.421E-03,2.738E-05,5.272E-02,8.893E-04,5.806E-02,5.806E-02,
    5.000E+01,5.581E-07,3.691E-03,2.169E-05,5.657E-02,9.866E-04,6.127E-02,6.126E-02,
    6.000E+01,3.875E-07,3.180E-03,1.795E-05,5.955E-02,1.064E-03,6.382E-02,6.382E-02,
    8.000E+01,2.180E-07,2.508E-03,1.335E-05,6.392E-02,1.180E-03,6.762E-02,6.762E-02,
    1.000E+02,1.395E-07,2.082E-03,1.062E-05,6.705E-02,1.264E-03,7.041E-02,7.041E-02])
I=I.reshape((int(len(I)/8),8))

Tl=np.array([1.000E-03,1.239E+01,3.618E-03,4.994E+03,0.000E+00,0.000E+00,5.007E+03,4.994E+03,
    1.500E-03,1.190E+01,6.585E-03,2.247E+03,0.000E+00,0.000E+00,2.259E+03,2.247E+03,
    2.000E-03,1.135E+01,9.517E-03,1.220E+03,0.000E+00,0.000E+00,1.231E+03,1.220E+03,
    2.389E-03,1.089E+01,1.173E-02,8.244E+02,0.000E+00,0.000E+00,8.353E+02,8.244E+02,
    2.389E-03,1.089E+01,1.173E-02,1.121E+03,0.000E+00,0.000E+00,1.132E+03,1.121E+03,
    2.437E-03,1.084E+01,1.198E-02,1.509E+03,0.000E+00,0.000E+00,1.519E+03,1.509E+03,
    2.485E-03,1.079E+01,1.222E-02,2.029E+03,0.000E+00,0.000E+00,2.040E+03,2.029E+03,
    2.485E-03,1.079E+01,1.222E-02,2.345E+03,0.000E+00,0.000E+00,2.356E+03,2.345E+03,
    2.711E-03,1.054E+01,1.344E-02,2.137E+03,0.000E+00,0.000E+00,2.147E+03,2.137E+03,
    2.957E-03,1.024E+01,1.478E-02,1.947E+03,0.000E+00,0.000E+00,1.957E+03,1.947E+03,
    2.957E-03,1.024E+01,1.478E-02,2.255E+03,0.000E+00,0.000E+00,2.266E+03,2.255E+03,
    3.000E-03,1.019E+01,1.501E-02,2.178E+03,0.000E+00,0.000E+00,2.189E+03,2.178E+03,
    3.416E-03,9.726E+00,1.718E-02,1.581E+03,0.000E+00,0.000E+00,1.591E+03,1.581E+03,
    3.416E-03,9.726E+00,1.718E-02,1.677E+03,0.000E+00,0.000E+00,1.687E+03,1.677E+03,
    3.557E-03,9.572E+00,1.790E-02,1.523E+03,0.000E+00,0.000E+00,1.532E+03,1.523E+03,
    3.704E-03,9.414E+00,1.865E-02,1.383E+03,0.000E+00,0.000E+00,1.392E+03,1.383E+03,
    3.704E-03,9.414E+00,1.865E-02,1.443E+03,0.000E+00,0.000E+00,1.452E+03,1.443E+03,
    4.000E-03,9.102E+00,2.014E-02,1.203E+03,0.000E+00,0.000E+00,1.212E+03,1.203E+03,
    5.000E-03,8.129E+00,2.498E-02,6.986E+02,0.000E+00,0.000E+00,7.068E+02,6.986E+02,
    6.000E-03,7.287E+00,2.961E-02,4.443E+02,0.000E+00,0.000E+00,4.516E+02,4.444E+02,
    8.000E-03,5.934E+00,3.816E-02,2.148E+02,0.000E+00,0.000E+00,2.208E+02,2.149E+02,
    1.000E-02,4.921E+00,4.552E-02,1.211E+02,0.000E+00,0.000E+00,1.260E+02,1.211E+02,
    1.266E-02,3.913E+00,5.351E-02,6.559E+01,0.000E+00,0.000E+00,6.956E+01,6.564E+01,
    1.266E-02,3.913E+00,5.351E-02,1.653E+02,0.000E+00,0.000E+00,1.693E+02,1.654E+02,
    1.364E-02,3.619E+00,5.608E-02,1.351E+02,0.000E+00,0.000E+00,1.388E+02,1.352E+02,
    1.470E-02,3.332E+00,5.866E-02,1.105E+02,0.000E+00,0.000E+00,1.139E+02,1.106E+02,
    1.470E-02,3.332E+00,5.866E-02,1.538E+02,0.000E+00,0.000E+00,1.572E+02,1.538E+02,
    1.500E-02,3.256E+00,5.937E-02,1.464E+02,0.000E+00,0.000E+00,1.497E+02,1.464E+02,
    1.535E-02,3.173E+00,6.017E-02,1.383E+02,0.000E+00,0.000E+00,1.416E+02,1.384E+02,
    1.535E-02,3.173E+00,6.017E-02,1.599E+02,0.000E+00,0.000E+00,1.631E+02,1.600E+02,
    2.000E-02,2.299E+00,6.924E-02,8.123E+01,0.000E+00,0.000E+00,8.360E+01,8.130E+01,
    3.000E-02,1.355E+00,8.268E-02,2.785E+01,0.000E+00,0.000E+00,2.929E+01,2.793E+01,
    4.000E-02,9.040E-01,9.060E-02,1.286E+01,0.000E+00,0.000E+00,1.385E+01,1.295E+01,
    5.000E-02,6.426E-01,9.517E-02,7.013E+00,0.000E+00,0.000E+00,7.750E+00,7.108E+00,
    6.000E-02,4.809E-01,9.771E-02,4.261E+00,0.000E+00,0.000E+00,4.839E+00,4.358E+00,
    8.000E-02,3.023E-01,9.953E-02,1.931E+00,0.000E+00,0.000E+00,2.332E+00,2.030E+00,
    8.553E-02,2.707E-01,9.962E-02,1.605E+00,0.000E+00,0.000E+00,1.976E+00,1.705E+00,
    8.553E-02,2.707E-01,9.962E-02,7.676E+00,0.000E+00,0.000E+00,8.046E+00,7.775E+00,
    1.000E-01,2.087E-01,9.924E-02,5.089E+00,0.000E+00,0.000E+00,5.396E+00,5.188E+00,
    1.500E-01,1.028E-01,9.508E-02,1.759E+00,0.000E+00,0.000E+00,1.957E+00,1.854E+00,
    2.000E-01,6.132E-02,8.987E-02,8.182E-01,0.000E+00,0.000E+00,9.694E-01,9.081E-01,
    3.000E-01,2.924E-02,8.053E-02,2.825E-01,0.000E+00,0.000E+00,3.922E-01,3.630E-01,
    4.000E-01,1.708E-02,7.322E-02,1.364E-01,0.000E+00,0.000E+00,2.267E-01,2.096E-01,
    5.000E-01,1.118E-02,6.745E-02,7.938E-02,0.000E+00,0.000E+00,1.580E-01,1.468E-01,
    6.000E-01,7.879E-03,6.276E-02,5.195E-02,0.000E+00,0.000E+00,1.226E-01,1.147E-01,
    8.000E-01,4.514E-03,5.545E-02,2.755E-02,0.000E+00,0.000E+00,8.751E-02,8.300E-02,
    1.000E+00,2.921E-03,5.003E-02,1.735E-02,0.000E+00,0.000E+00,7.031E-02,6.739E-02,
    1.022E+00,2.799E-03,4.950E-02,1.661E-02,0.000E+00,0.000E+00,6.891E-02,6.611E-02,
    1.250E+00,1.885E-03,4.485E-02,1.121E-02,3.710E-04,0.000E+00,5.831E-02,5.642E-02,
    1.500E+00,1.316E-03,4.081E-02,7.982E-03,1.767E-03,0.000E+00,5.187E-02,5.056E-02,
    2.000E+00,7.446E-04,3.489E-02,4.829E-03,5.348E-03,0.000E+00,4.581E-02,4.506E-02,
    2.044E+00,7.131E-04,3.444E-02,4.655E-03,5.663E-03,0.000E+00,4.548E-02,4.476E-02,
    3.000E+00,3.324E-04,2.748E-02,2.525E-03,1.176E-02,9.600E-06,4.211E-02,4.177E-02,
    4.000E+00,1.873E-04,2.293E-02,1.654E-03,1.693E-02,3.913E-05,4.175E-02,4.156E-02,
    5.000E+00,1.200E-04,1.981E-02,1.212E-03,2.126E-02,7.782E-05,4.248E-02,4.236E-02,
    6.000E+00,8.336E-05,1.751E-02,9.502E-04,2.500E-02,1.193E-04,4.366E-02,4.358E-02,
    7.000E+00,6.126E-05,1.574E-02,7.782E-04,2.828E-02,1.605E-04,4.502E-02,4.496E-02,
    8.000E+00,4.691E-05,1.433E-02,6.574E-04,3.123E-02,2.003E-04,4.647E-02,4.642E-02,
    9.000E+00,3.707E-05,1.317E-02,5.684E-04,3.394E-02,2.384E-04,4.796E-02,4.792E-02,
    1.000E+01,3.002E-05,1.220E-02,5.000E-04,3.642E-02,2.744E-04,4.943E-02,4.940E-02,
    1.100E+01,2.482E-05,1.139E-02,4.458E-04,3.869E-02,3.085E-04,5.085E-02,5.083E-02,
    1.200E+01,2.086E-05,1.068E-02,4.022E-04,4.084E-02,3.406E-04,5.228E-02,5.226E-02,
    1.300E+01,1.777E-05,1.006E-02,3.662E-04,4.284E-02,3.707E-04,5.366E-02,5.364E-02,
    1.400E+01,1.532E-05,9.517E-03,3.362E-04,4.470E-02,3.992E-04,5.497E-02,5.495E-02,
    1.500E+01,1.335E-05,9.034E-03,3.103E-04,4.644E-02,4.264E-04,5.622E-02,5.621E-02,
    1.600E+01,1.173E-05,8.604E-03,2.883E-04,4.806E-02,4.520E-04,5.741E-02,5.740E-02,
    1.800E+01,9.273E-06,7.864E-03,2.524E-04,5.100E-02,4.994E-04,5.963E-02,5.962E-02,
    2.000E+01,7.511E-06,7.251E-03,2.243E-04,5.360E-02,5.424E-04,6.162E-02,6.161E-02,
    2.200E+01,6.205E-06,6.736E-03,2.018E-04,5.598E-02,5.816E-04,6.351E-02,6.350E-02,
    2.400E+01,5.215E-06,6.294E-03,1.834E-04,5.813E-02,6.176E-04,6.523E-02,6.523E-02,
    2.600E+01,4.443E-06,5.911E-03,1.681E-04,6.014E-02,6.506E-04,6.687E-02,6.687E-02,
    2.800E+01,3.833E-06,5.575E-03,1.550E-04,6.194E-02,6.812E-04,6.835E-02,6.835E-02,
    3.000E+01,3.338E-06,5.280E-03,1.439E-04,6.361E-02,7.095E-04,6.975E-02,6.975E-02,
    4.000E+01,1.878E-06,4.196E-03,1.058E-04,7.042E-02,8.262E-04,7.555E-02,7.555E-02,
    5.000E+01,1.202E-06,3.503E-03,8.365E-05,7.549E-02,9.140E-04,7.999E-02,7.999E-02,
    6.000E+01,8.344E-07,3.017E-03,6.915E-05,7.941E-02,9.829E-04,8.348E-02,8.348E-02,
    8.000E+01,4.694E-07,2.380E-03,5.136E-05,8.518E-02,1.086E-03,8.870E-02,8.870E-02,
    1.000E+02,3.005E-07,1.975E-03,4.084E-05,8.925E-02,1.160E-03,9.243E-02,9.243E-02])
Tl=Tl.reshape((int(len(Tl)/8),8))

def merge_NaI():
    NaI=np.zeros(Na.shape[1])
    w1 = 22.989769
    w2 = 126.90447
    n2 = 0
    for n1,E1 in enumerate(Na[:,0]):
        while E1 > I[n2,0]:
            NaI = np.vstack((NaI, continue_log_row(I[n2,:], w2, Na[n1,:], Na[n1-1,:], w1)))
            n2 += 1
        
        if E1 < I[n2,0]:
            NaI = np.vstack((NaI, continue_log_row(Na[n1,:], w1, I[n2,:], I[n2-1,:], w2)))
            
        
        elif E1 == I[n2,0]:
            out = ( w1 * Na[n1,:] + w2 * I[n2,:] ) / (w1 + w2)
            out[0] = E1
            NaI = np.vstack((NaI, out))
        
        n2 += 1
    return NaI[1:,:]

def continue_log_row(row1, w1, mrow1, mrow2, w2):
    out = np.zeros(len(row1))
    out[0] = row1[0]
    for i in range(len(row1[1:])):
        if mrow1[i] == 0. or mrow2[i] == 0.:
            out[i] = 0.
        else:
            s=np.log(mrow2[i]/mrow1[i])/np.log(mrow2[0]/mrow1[0])
            f=mrow1[i]/(mrow1[0]**s)
            out[i] = (w1 * row1[i] + w2 * f * row1[0]**s ) / (w1 + w2)
    return out


## Klein Nishina

@njit
def klein_nishina_diff_energy_cs(E1,E2):
    theta=np.arccos( 1-0.511*( (E1-E2) / (E1*E2) ) )
    if np.isnan(theta):
        return 0.
    P=E2/E1
    return P**2 * (P+1/P-np.sin(theta)**2) * (1/E2**2)


points, weights = np.polynomial.legendre.leggauss(100)

@njit
def calc_total_kn_cs_gauss():
    E1s=geomspace(0.001,100,1000)
    outs=np.zeros(len(E1s))
    for i in range(len(E1s)):
        Ec=E1s[i]*((1/( 1+(2*E1s[i]/0.511)) ) )*1.00001
        
        #points, weights = np.polynomial.legendre.leggauss(10)
        
        B = 1/2 * np.log(E1s[i]/Ec)
        A = E1s[i] / np.exp(B)
        
        y = lambda x: A * np.exp(B*x)
        
        cs = np.zeros(len(points))
        for j,x in enumerate(points):
            cs[j]=klein_nishina_diff_energy_cs(E1s[i], y(x))
            
        outs[i] = np.sum(cs * y(points) * B * weights)
    return outs


@njit
def geomspace(start, stop, num):
    return np.array([ start * (stop/start) ** ( i/ (num-1) ) for i in range(num) ])



### COMPTEL D2 Photopeak Ratios

NaI_photopeak_rations_labels=["Energy [MeV]", "10x10", "8x8", "8x4", "5x5", "3x3", "2x2", "1x1", "[in. diameter, in. length]"]
NaI_photopeak_relations_geoms=np.array([[10,10],
                               [8,8],
                               [8,4],
                               [5,5],
                               [3,3],
                               [2,2],
                               [1,1]])*2.54
NaI_photopeak_ratios=np.array([[0.25,0.50,1.00,2.00,3.00,4.00,5.00,7.50,10.0],
                               [0.96,0.88,0.79,0.70,0.62,0.58,0.54,0.48,0.43],
                               [0.95,0.87,0.75,0.62,0.55,0.50,0.47,0.39,0.34],
                               [0.95,0.84,0.66,0.51,0.43,0.37,0.34,0.26,0.21],
                               [0.94,0.80,0.62,0.46,0.39,0.33,0.29,0.21,0.18],
                               [0.93,0.69,0.46,0.31,0.23,0.18,0.15,0.09,0.07],
                               [0.92,0.59,0.35,0.21,0.15,0.11,0.08,0.05,0.03],
                               [0.81,0.44,0.21,0.11,0.07,0.05,0.03,0.02,0.01]])

@njit
def photopeak_func1(E,a,b): #MeV
    return 1-a*np.exp(-b/E)

def photopeak_minimize1(p,E,r):
    return np.sum( ( photopeak_func1(E,p[0],p[1]) - r )**2 )

def fit_photopeak_func1(data=NaI_photopeak_ratios,ret=False):
    param=[]
    #E=np.linspace(0.25,10,80)
    for geom in range(1,len(NaI_photopeak_ratios)):
        res=minimize(photopeak_minimize1,[1,1],(data[0,:],data[geom,:]))
        #plt.plot(data[0,:],data[geom,:],".",c="C"+str(geom-1))
        #plt.plot(E,photopeak_func1(E, res.x[0], res.x[1]),c="C"+str(geom-1),label=str(int(NaI_photopeak_relations_geoms[geom-1,0]*10)/10)+"x"+str(int(NaI_photopeak_relations_geoms[geom-1,1]*10)/10))
        param.append(res.x)
    #plt.legend()
    #plt.xlabel("Energy [MeV]")
    #plt.ylabel("Photopeak/Total Ratio")
    if ret:
        return np.array(param)
    #plt.savefig(p_plots+'NaI_photopeak_1.pdf',bbox_inches='tight')
    
NaI_func1_param=fit_photopeak_func1(ret=True)

@njit
def fit_photopeak_param1_1_func1(D,H,a,b,c,d):
    return a*D**b*H**c+d

def minimize_photopeak_param1_1(p,D,H,act_param):
    return np.sum( ( fit_photopeak_param1_1_func1(D,H,p[0],p[1],p[2],p[3]) - act_param)**2 )
    

def fit_photopeak_param1(param=NaI_func1_param,ret=False):
    D,H,act_param1,act_param2=NaI_photopeak_relations_geoms[:,0], NaI_photopeak_relations_geoms[:,1], NaI_func1_param[:,0], NaI_func1_param[:,1]
    a=minimize( minimize_photopeak_param1_1, [1,1,1,0], (D,H,act_param1))
    
    b=minimize( minimize_photopeak_param1_1, [1,1,1,0], (D,H,act_param2))
    
    if ret:
        return a.x,b.x
    plt.plot(D**2*H,act_param1,".")
    plt.plot(D**2*H,fit_photopeak_param1_1_func1(D, H, a.x[0], a.x[1], a.x[2], a.x[3]))
    plt.plot(D**2*H,act_param2,".")
    plt.plot(D**2*H,fit_photopeak_param1_1_func1(D, H, b.x[0], b.x[1], b.x[2], b.x[3]))
    #plt.savefig(p_plots+'NaI_photopeak_param_fits.pdf',bbox_inches='tight')

NaI_a,NaI_b=fit_photopeak_param1(ret=True)


#MeV
@vectorize
def D2_cell_photopeak_ratio(E):
    D,H=28.2,7.5
    a=fit_photopeak_param1_1_func1(D,H,NaI_a[0],NaI_a[1],NaI_a[2],NaI_a[3])
    b=fit_photopeak_param1_1_func1(D,H,NaI_b[0],NaI_b[1],NaI_b[2],NaI_b[3])
    return photopeak_func1(E, a, b)



### GBM Data
@vectorize
def FM01_channel_to_energy(c):
    return (-5.99018 + 0.22921*c + 4.6569E-6*c**2) / 1000

@vectorize
def FM01_uncertainty(E):
    return (13.9659 + 0.49129*(E*1000) + -0.00013*(E*1000)**2) / (2*np.sqrt(2*np.log(2))) / 1000

@vectorize
def FM03_channel_to_energy(c):
    return (-5.23113 + 0.23068*c + 4.1429E-6*c**2) / 1000

@vectorize
def FM03_uncertainty(E):
    return (10.59739 + 0.47665*(E*1000) + -0.00015*(E*1000)**2) / (2*np.sqrt(2*np.log(2))) / 1000


def read_GBM_file(filename="4096_FM03-00265_Backsub_Na_22.txt"):
    data = np.zeros(4100)
    with open(filename, "r") as file:
        counter = 0
        for line in file:
            data[counter] = float(line.strip())
            
            counter += 1
            
    return data[4:-1]


def calc_photopeak_ratio(filename="4096_FM03-00265_Backsub_Na_22.txt", peak_energy=0.511):
    x = FM03_channel_to_energy(np.linspace(0,4094,4095)) ####
    y = read_GBM_file(filename)
    
    res = minimize(gauss_fit, [peak_energy, FM03_uncertainty(peak_energy)/3, 100], (x,y)) ####
    
    y_f = gauss_sig(x, res.x[0], res.x[1], res.x[2])
    plt.plot(x,y)
    plt.plot(x,y_f)
    
    print(np.sum(y_f))
    print(np.sum(y))
    print(np.sum(y_f)/np.sum(y))
    
    return res.x
    
    
    
@vectorize
def gauss_sig(x,mean,sigma,amplitude):
    return amplitude * (2*np.pi)**(-1/2) * sigma**(-1) * np.exp( -(x-mean)**2 / (2*sigma**2) )

def gauss_fit(p,x,y):
    return np.sum( (gauss_sig(x, p[0], p[1], p[2]) - y)**2 )

def test():
    channels = np.linspace(0,4094,4095)
    data = read_GBM_file()
    
    Es = FM03_channel_to_energy(channels)
    
    plt.plot(Es,data)


def test_back_sub():
    pure_data = "4096_FM01-00182_Mn_54.txt"
    pure_data_t = 43167.743
    backsub_data = "4096_FM01-00182_Backsub_Mn_54.txt"
    backsub_data_t = 43167.743
    background = "4096_FM01-00166_Background.txt"
    background_t = 3598.163
    
    x = FM01_channel_to_energy(np.linspace(0,4094,4095))
    #plt.plot(x, read_GBM_file(pure_data)-read_GBM_file(background)*pure_data_t/background_t)
    # plt.plot(x, read_GBM_file(pure_data))
    # plt.plot(x, read_GBM_file(background))
    plt.plot(x, read_GBM_file(backsub_data))
    #plt.yscale("log")
    plt.ylim(0,4500)










import numpy as np
import matplotlib.pyplot as plt
import reading_data as rd
from scipy.optimize import minimize
from numba import njit
import time

p_plots='D:\\COMPTEL_Simulation_Project\\Werkstudent\\Plots/'

#Energy [MeV], Coh. Scat., Inc. Scat, Photel. Abs., Nucl. Pr. Prd., Elec. Pr. Prd., Tot. w/ Coh., Tot. wo/ Coh. [cm2/g]
Na=np.array([1.000E-03,1.919E+00,1.270E-02,6.523E+02,0.000E+00,0.000E+00,6.542E+02,6.523E+02,
    1.035E-03,1.909E+00,1.326E-02,5.939E+02,0.000E+00,0.000E+00,5.958E+02,5.939E+02,
    1.072E-03,1.898E+00,1.384E-02,5.412E+02,0.000E+00,0.000E+00,5.431E+02,5.412E+02,
    1.072E-03,1.898E+00,1.384E-02,6.433E+03,0.000E+00,0.000E+00,6.435E+03,6.433E+03,
    1.500E-03,1.775E+00,1.994E-02,3.193E+03,0.000E+00,0.000E+00,3.195E+03,3.193E+03,
    2.000E-03,1.641E+00,2.638E-02,1.519E+03,0.000E+00,0.000E+00,1.521E+03,1.519E+03,
    3.000E-03,1.403E+00,3.948E-02,5.056E+02,0.000E+00,0.000E+00,5.070E+02,5.056E+02,
    4.000E-03,1.185E+00,5.284E-02,2.249E+02,0.000E+00,0.000E+00,2.261E+02,2.250E+02,
    5.000E-03,9.925E-01,6.557E-02,1.183E+02,0.000E+00,0.000E+00,1.194E+02,1.184E+02,
    6.000E-03,8.306E-01,7.717E-02,6.939E+01,0.000E+00,0.000E+00,7.030E+01,6.947E+01,
    8.000E-03,5.931E-01,9.624E-02,2.950E+01,0.000E+00,0.000E+00,3.018E+01,2.959E+01,
    1.000E-02,4.409E-01,1.101E-01,1.502E+01,0.000E+00,0.000E+00,1.557E+01,1.513E+01,
    1.500E-02,2.470E-01,1.300E-01,4.317E+00,0.000E+00,0.000E+00,4.694E+00,4.447E+00,
    2.000E-02,1.612E-01,1.397E-01,1.756E+00,0.000E+00,0.000E+00,2.057E+00,1.896E+00,
    3.000E-02,8.597E-02,1.484E-01,4.854E-01,0.000E+00,0.000E+00,7.198E-01,6.338E-01,
    4.000E-02,5.325E-02,1.509E-01,1.927E-01,0.000E+00,0.000E+00,3.969E-01,3.437E-01,
    5.000E-02,3.607E-02,1.506E-01,9.370E-02,0.000E+00,0.000E+00,2.804E-01,2.443E-01,
    6.000E-02,2.600E-02,1.489E-01,5.187E-02,0.000E+00,0.000E+00,2.268E-01,2.008E-01,
    8.000E-02,1.533E-02,1.440E-01,2.032E-02,0.000E+00,0.000E+00,1.796E-01,1.643E-01,
    1.000E-01,1.009E-02,1.386E-01,9.826E-03,0.000E+00,0.000E+00,1.585E-01,1.484E-01,
    1.500E-01,4.642E-03,1.262E-01,2.638E-03,0.000E+00,0.000E+00,1.335E-01,1.289E-01,
    2.000E-01,2.648E-03,1.162E-01,1.053E-03,0.000E+00,0.000E+00,1.199E-01,1.173E-01,
    3.000E-01,1.191E-03,1.015E-01,2.999E-04,0.000E+00,0.000E+00,1.029E-01,1.018E-01,
    4.000E-01,6.727E-04,9.105E-02,1.292E-04,0.000E+00,0.000E+00,9.186E-02,9.118E-02,
    5.000E-01,4.314E-04,8.322E-02,6.989E-05,0.000E+00,0.000E+00,8.372E-02,8.329E-02,
    6.000E-01,2.999E-04,7.701E-02,4.359E-05,0.000E+00,0.000E+00,7.736E-02,7.706E-02,
    8.000E-01,1.689E-04,6.769E-02,2.203E-05,0.000E+00,0.000E+00,6.788E-02,6.771E-02,
    1.000E+00,1.081E-04,6.088E-02,1.369E-05,0.000E+00,0.000E+00,6.100E-02,6.089E-02,
    1.022E+00,1.035E-04,6.022E-02,1.287E-05,0.000E+00,0.000E+00,6.034E-02,6.023E-02,
    1.250E+00,6.923E-05,5.443E-02,8.731E-06,2.585E-05,0.000E+00,5.454E-02,5.447E-02,
    1.500E+00,4.809E-05,4.948E-02,6.329E-06,1.421E-04,0.000E+00,4.968E-02,4.963E-02,
    2.000E+00,2.706E-05,4.223E-02,3.963E-06,5.640E-04,0.000E+00,4.282E-02,4.279E-02,
    2.044E+00,2.590E-05,4.170E-02,3.832E-06,6.080E-04,0.000E+00,4.234E-02,4.231E-02,
    3.000E+00,1.202E-05,3.324E-02,2.200E-06,1.608E-03,1.163E-05,3.488E-02,3.486E-02,
    4.000E+00,6.764E-06,2.771E-02,1.504E-06,2.604E-03,4.747E-05,3.037E-02,3.037E-02,
    5.000E+00,4.330E-06,2.394E-02,1.138E-06,3.492E-03,9.459E-05,2.753E-02,2.752E-02,
    6.000E+00,3.007E-06,2.116E-02,9.132E-07,4.285E-03,1.453E-04,2.559E-02,2.559E-02,
    7.000E+00,2.209E-06,1.902E-02,7.617E-07,4.993E-03,1.959E-04,2.421E-02,2.421E-02,
    8.000E+00,1.691E-06,1.731E-02,6.530E-07,5.632E-03,2.450E-04,2.319E-02,2.318E-02,
    9.000E+00,1.336E-06,1.591E-02,5.713E-07,6.208E-03,2.921E-04,2.241E-02,2.241E-02,
    1.000E+01,1.082E-06,1.474E-02,5.074E-07,6.735E-03,3.369E-04,2.181E-02,2.181E-02,
    1.100E+01,8.946E-07,1.375E-02,4.566E-07,7.211E-03,3.796E-04,2.134E-02,2.134E-02,
    1.200E+01,7.515E-07,1.289E-02,4.147E-07,7.649E-03,4.199E-04,2.096E-02,2.096E-02,
    1.300E+01,6.405E-07,1.215E-02,3.801E-07,8.055E-03,4.579E-04,2.066E-02,2.066E-02,
    1.400E+01,5.522E-07,1.149E-02,3.505E-07,8.432E-03,4.940E-04,2.042E-02,2.042E-02,
    1.500E+01,4.809E-07,1.091E-02,3.253E-07,8.786E-03,5.286E-04,2.023E-02,2.022E-02,
    1.600E+01,4.228E-07,1.039E-02,3.036E-07,9.116E-03,5.614E-04,2.007E-02,2.007E-02,
    1.800E+01,3.340E-07,9.496E-03,2.674E-07,9.724E-03,6.224E-04,1.984E-02,1.984E-02,
    2.000E+01,2.706E-07,8.757E-03,2.392E-07,1.027E-02,6.782E-04,1.970E-02,1.970E-02,
    2.200E+01,2.236E-07,8.134E-03,2.163E-07,1.076E-02,7.295E-04,1.962E-02,1.962E-02,
    2.400E+01,1.879E-07,7.599E-03,1.974E-07,1.121E-02,7.769E-04,1.959E-02,1.959E-02,
    2.600E+01,1.601E-07,7.135E-03,1.815E-07,1.162E-02,8.212E-04,1.957E-02,1.957E-02,
    2.800E+01,1.380E-07,6.732E-03,1.680E-07,1.200E-02,8.621E-04,1.959E-02,1.959E-02,
    3.000E+01,1.203E-07,6.376E-03,1.563E-07,1.235E-02,9.006E-04,1.962E-02,1.962E-02,
    4.000E+01,6.764E-08,5.066E-03,1.160E-07,1.379E-02,1.062E-03,1.992E-02,1.992E-02,
    5.000E+01,4.330E-08,4.228E-03,9.228E-08,1.488E-02,1.187E-03,2.029E-02,2.029E-02,
    6.000E+01,3.007E-08,3.644E-03,7.659E-08,1.574E-02,1.287E-03,2.067E-02,2.067E-02,
    8.000E+01,1.691E-08,2.874E-03,5.716E-08,1.703E-02,1.443E-03,2.135E-02,2.135E-02,
    1.000E+02,1.082E-08,2.385E-03,4.558E-08,1.796E-02,1.559E-03,2.191E-02,2.191E-02])
Na=Na.reshape((int(len(Na)/8),8))

I=np.array([1.000E-03,8.418E+00,4.688E-03,9.087E+03,0.000E+00,0.000E+00,9.096E+03,9.087E+03,
    1.035E-03,8.388E+00,4.972E-03,8.450E+03,0.000E+00,0.000E+00,8.458E+03,8.450E+03,
    1.072E-03,8.357E+00,5.272E-03,7.858E+03,0.000E+00,0.000E+00,7.867E+03,7.858E+03,
    1.072E-03,8.357E+00,5.272E-03,8.195E+03,0.000E+00,0.000E+00,8.204E+03,8.195E+03,
    1.500E-03,7.958E+00,8.969E-03,3.911E+03,0.000E+00,0.000E+00,3.919E+03,3.911E+03,
    2.000E-03,7.446E+00,1.342E-02,1.989E+03,0.000E+00,0.000E+00,1.997E+03,1.989E+03,
    3.000E-03,6.463E+00,2.190E-02,7.355E+02,0.000E+00,0.000E+00,7.420E+02,7.356E+02,
    4.000E-03,5.628E+00,2.932E-02,3.551E+02,0.000E+00,0.000E+00,3.608E+02,3.551E+02,
    4.557E-03,5.229E+00,3.296E-02,2.539E+02,0.000E+00,0.000E+00,2.591E+02,2.539E+02,
    4.557E-03,5.229E+00,3.296E-02,7.498E+02,0.000E+00,0.000E+00,7.550E+02,7.498E+02,
    4.702E-03,5.133E+00,3.387E-02,7.027E+02,0.000E+00,0.000E+00,7.079E+02,7.027E+02,
    4.852E-03,5.035E+00,3.479E-02,6.587E+02,0.000E+00,0.000E+00,6.637E+02,6.587E+02,
    4.852E-03,5.035E+00,3.479E-02,8.883E+02,0.000E+00,0.000E+00,8.934E+02,8.884E+02,
    5.000E-03,4.940E+00,3.568E-02,8.380E+02,0.000E+00,0.000E+00,8.430E+02,8.381E+02,
    5.188E-03,4.821E+00,3.679E-02,7.616E+02,0.000E+00,0.000E+00,7.665E+02,7.617E+02,
    5.188E-03,4.821E+00,3.679E-02,8.788E+02,0.000E+00,0.000E+00,8.837E+02,8.789E+02,
    6.000E-03,4.356E+00,4.129E-02,6.131E+02,0.000E+00,0.000E+00,6.175E+02,6.131E+02,
    8.000E-03,3.446E+00,5.106E-02,2.886E+02,0.000E+00,0.000E+00,2.921E+02,2.887E+02,
    1.000E-02,2.798E+00,5.955E-02,1.597E+02,0.000E+00,0.000E+00,1.626E+02,1.598E+02,
    1.500E-02,1.843E+00,7.578E-02,5.320E+01,0.000E+00,0.000E+00,5.511E+01,5.327E+01,
    2.000E-02,1.312E+00,8.646E-02,2.404E+01,0.000E+00,0.000E+00,2.543E+01,2.412E+01,
    3.000E-02,7.455E-01,9.908E-02,7.716E+00,0.000E+00,0.000E+00,8.561E+00,7.815E+00,
    3.317E-02,6.430E-01,1.016E-01,5.808E+00,0.000E+00,0.000E+00,6.553E+00,5.910E+00,
    3.317E-02,6.430E-01,1.016E-01,3.508E+01,0.000E+00,0.000E+00,3.583E+01,3.518E+01,
    4.000E-02,4.859E-01,1.057E-01,2.151E+01,0.000E+00,0.000E+00,2.210E+01,2.161E+01,
    5.000E-02,3.452E-01,1.093E-01,1.187E+01,0.000E+00,0.000E+00,1.232E+01,1.198E+01,
    6.000E-02,2.577E-01,1.110E-01,7.208E+00,0.000E+00,0.000E+00,7.577E+00,7.319E+00,
    8.000E-02,1.584E-01,1.115E-01,3.240E+00,0.000E+00,0.000E+00,3.510E+00,3.352E+00,
    1.000E-01,1.073E-01,1.100E-01,1.725E+00,0.000E+00,0.000E+00,1.942E+00,1.835E+00,
    1.500E-01,5.220E-02,1.036E-01,5.419E-01,0.000E+00,0.000E+00,6.978E-01,6.456E-01,
    2.000E-01,3.087E-02,9.709E-02,2.383E-01,0.000E+00,0.000E+00,3.663E-01,3.354E-01,
    3.000E-01,1.440E-02,8.627E-02,7.650E-02,0.000E+00,0.000E+00,1.772E-01,1.628E-01,
    4.000E-01,8.295E-03,7.811E-02,3.525E-02,0.000E+00,0.000E+00,1.217E-01,1.134E-01,
    5.000E-01,5.381E-03,7.175E-02,1.988E-02,0.000E+00,0.000E+00,9.701E-02,9.163E-02,
    6.000E-01,3.771E-03,6.663E-02,1.274E-02,0.000E+00,0.000E+00,8.313E-02,7.936E-02,
    8.000E-01,2.143E-03,5.875E-02,6.596E-03,0.000E+00,0.000E+00,6.749E-02,6.534E-02,
    1.000E+00,1.379E-03,5.291E-02,4.120E-03,0.000E+00,0.000E+00,5.841E-02,5.703E-02,
    1.022E+00,1.321E-03,5.234E-02,3.922E-03,0.000E+00,0.000E+00,5.759E-02,5.626E-02,
    1.250E+00,8.860E-04,4.737E-02,2.645E-03,1.883E-04,0.000E+00,5.109E-02,5.021E-02,
    1.500E+00,6.164E-04,4.309E-02,1.893E-03,8.713E-04,0.000E+00,4.647E-02,4.586E-02,
    2.000E+00,3.476E-04,3.681E-02,1.152E-03,2.939E-03,0.000E+00,4.124E-02,4.090E-02,
    2.044E+00,3.329E-04,3.635E-02,1.111E-03,3.139E-03,0.000E+00,4.094E-02,4.061E-02,
    3.000E+00,1.547E-04,2.898E-02,6.112E-04,7.408E-03,1.014E-05,3.716E-02,3.701E-02,
    4.000E+00,8.713E-05,2.418E-02,4.046E-04,1.136E-02,4.134E-05,3.607E-02,3.598E-02,
    5.000E+00,5.576E-05,2.088E-02,2.992E-04,1.476E-02,8.229E-05,3.608E-02,3.602E-02,
    6.000E+00,3.873E-05,1.846E-02,2.361E-04,1.769E-02,1.262E-04,3.655E-02,3.651E-02,
    7.000E+00,2.846E-05,1.659E-02,1.944E-04,2.030E-02,1.700E-04,3.729E-02,3.726E-02,
    8.000E+00,2.179E-05,1.510E-02,1.650E-04,2.265E-02,2.123E-04,3.815E-02,3.813E-02,
    9.000E+00,1.722E-05,1.389E-02,1.431E-04,2.478E-02,2.528E-04,3.907E-02,3.906E-02,
    1.000E+01,1.395E-05,1.286E-02,1.262E-04,2.673E-02,2.913E-04,4.002E-02,4.001E-02,
    1.100E+01,1.153E-05,1.200E-02,1.129E-04,2.852E-02,3.276E-04,4.097E-02,4.096E-02,
    1.200E+01,9.685E-06,1.125E-02,1.021E-04,3.019E-02,3.619E-04,4.192E-02,4.191E-02,
    1.300E+01,8.252E-06,1.060E-02,9.310E-05,3.174E-02,3.942E-04,4.283E-02,4.283E-02,
    1.400E+01,7.118E-06,1.003E-02,8.556E-05,3.316E-02,4.249E-04,4.371E-02,4.370E-02,
    1.500E+01,6.198E-06,9.524E-03,7.915E-05,3.448E-02,4.539E-04,4.455E-02,4.454E-02,
    1.600E+01,5.448E-06,9.068E-03,7.365E-05,3.571E-02,4.817E-04,4.534E-02,4.533E-02,
    1.800E+01,4.305E-06,8.285E-03,6.459E-05,3.794E-02,5.324E-04,4.683E-02,4.683E-02,
    2.000E+01,3.487E-06,7.640E-03,5.751E-05,3.995E-02,5.789E-04,4.823E-02,4.823E-02,
    2.200E+01,2.882E-06,7.099E-03,5.182E-05,4.177E-02,6.216E-04,4.954E-02,4.954E-02,
    2.400E+01,2.422E-06,6.634E-03,4.717E-05,4.342E-02,6.606E-04,5.076E-02,5.076E-02,
    2.600E+01,2.063E-06,6.231E-03,4.327E-05,4.493E-02,6.966E-04,5.190E-02,5.190E-02,
    2.800E+01,1.779E-06,5.875E-03,3.996E-05,4.631E-02,7.298E-04,5.295E-02,5.295E-02,
    3.000E+01,1.550E-06,5.562E-03,3.712E-05,4.760E-02,7.612E-04,5.396E-02,5.396E-02,
    4.000E+01,8.717E-07,4.421E-03,2.738E-05,5.272E-02,8.893E-04,5.806E-02,5.806E-02,
    5.000E+01,5.581E-07,3.691E-03,2.169E-05,5.657E-02,9.866E-04,6.127E-02,6.126E-02,
    6.000E+01,3.875E-07,3.180E-03,1.795E-05,5.955E-02,1.064E-03,6.382E-02,6.382E-02,
    8.000E+01,2.180E-07,2.508E-03,1.335E-05,6.392E-02,1.180E-03,6.762E-02,6.762E-02,
    1.000E+02,1.395E-07,2.082E-03,1.062E-05,6.705E-02,1.264E-03,7.041E-02,7.041E-02])
I=I.reshape((int(len(I)/8),8))

Tl=np.array([1.000E-03,1.239E+01,3.618E-03,4.994E+03,0.000E+00,0.000E+00,5.007E+03,4.994E+03,
    1.500E-03,1.190E+01,6.585E-03,2.247E+03,0.000E+00,0.000E+00,2.259E+03,2.247E+03,
    2.000E-03,1.135E+01,9.517E-03,1.220E+03,0.000E+00,0.000E+00,1.231E+03,1.220E+03,
    2.389E-03,1.089E+01,1.173E-02,8.244E+02,0.000E+00,0.000E+00,8.353E+02,8.244E+02,
    2.389E-03,1.089E+01,1.173E-02,1.121E+03,0.000E+00,0.000E+00,1.132E+03,1.121E+03,
    2.437E-03,1.084E+01,1.198E-02,1.509E+03,0.000E+00,0.000E+00,1.519E+03,1.509E+03,
    2.485E-03,1.079E+01,1.222E-02,2.029E+03,0.000E+00,0.000E+00,2.040E+03,2.029E+03,
    2.485E-03,1.079E+01,1.222E-02,2.345E+03,0.000E+00,0.000E+00,2.356E+03,2.345E+03,
    2.711E-03,1.054E+01,1.344E-02,2.137E+03,0.000E+00,0.000E+00,2.147E+03,2.137E+03,
    2.957E-03,1.024E+01,1.478E-02,1.947E+03,0.000E+00,0.000E+00,1.957E+03,1.947E+03,
    2.957E-03,1.024E+01,1.478E-02,2.255E+03,0.000E+00,0.000E+00,2.266E+03,2.255E+03,
    3.000E-03,1.019E+01,1.501E-02,2.178E+03,0.000E+00,0.000E+00,2.189E+03,2.178E+03,
    3.416E-03,9.726E+00,1.718E-02,1.581E+03,0.000E+00,0.000E+00,1.591E+03,1.581E+03,
    3.416E-03,9.726E+00,1.718E-02,1.677E+03,0.000E+00,0.000E+00,1.687E+03,1.677E+03,
    3.557E-03,9.572E+00,1.790E-02,1.523E+03,0.000E+00,0.000E+00,1.532E+03,1.523E+03,
    3.704E-03,9.414E+00,1.865E-02,1.383E+03,0.000E+00,0.000E+00,1.392E+03,1.383E+03,
    3.704E-03,9.414E+00,1.865E-02,1.443E+03,0.000E+00,0.000E+00,1.452E+03,1.443E+03,
    4.000E-03,9.102E+00,2.014E-02,1.203E+03,0.000E+00,0.000E+00,1.212E+03,1.203E+03,
    5.000E-03,8.129E+00,2.498E-02,6.986E+02,0.000E+00,0.000E+00,7.068E+02,6.986E+02,
    6.000E-03,7.287E+00,2.961E-02,4.443E+02,0.000E+00,0.000E+00,4.516E+02,4.444E+02,
    8.000E-03,5.934E+00,3.816E-02,2.148E+02,0.000E+00,0.000E+00,2.208E+02,2.149E+02,
    1.000E-02,4.921E+00,4.552E-02,1.211E+02,0.000E+00,0.000E+00,1.260E+02,1.211E+02,
    1.266E-02,3.913E+00,5.351E-02,6.559E+01,0.000E+00,0.000E+00,6.956E+01,6.564E+01,
    1.266E-02,3.913E+00,5.351E-02,1.653E+02,0.000E+00,0.000E+00,1.693E+02,1.654E+02,
    1.364E-02,3.619E+00,5.608E-02,1.351E+02,0.000E+00,0.000E+00,1.388E+02,1.352E+02,
    1.470E-02,3.332E+00,5.866E-02,1.105E+02,0.000E+00,0.000E+00,1.139E+02,1.106E+02,
    1.470E-02,3.332E+00,5.866E-02,1.538E+02,0.000E+00,0.000E+00,1.572E+02,1.538E+02,
    1.500E-02,3.256E+00,5.937E-02,1.464E+02,0.000E+00,0.000E+00,1.497E+02,1.464E+02,
    1.535E-02,3.173E+00,6.017E-02,1.383E+02,0.000E+00,0.000E+00,1.416E+02,1.384E+02,
    1.535E-02,3.173E+00,6.017E-02,1.599E+02,0.000E+00,0.000E+00,1.631E+02,1.600E+02,
    2.000E-02,2.299E+00,6.924E-02,8.123E+01,0.000E+00,0.000E+00,8.360E+01,8.130E+01,
    3.000E-02,1.355E+00,8.268E-02,2.785E+01,0.000E+00,0.000E+00,2.929E+01,2.793E+01,
    4.000E-02,9.040E-01,9.060E-02,1.286E+01,0.000E+00,0.000E+00,1.385E+01,1.295E+01,
    5.000E-02,6.426E-01,9.517E-02,7.013E+00,0.000E+00,0.000E+00,7.750E+00,7.108E+00,
    6.000E-02,4.809E-01,9.771E-02,4.261E+00,0.000E+00,0.000E+00,4.839E+00,4.358E+00,
    8.000E-02,3.023E-01,9.953E-02,1.931E+00,0.000E+00,0.000E+00,2.332E+00,2.030E+00,
    8.553E-02,2.707E-01,9.962E-02,1.605E+00,0.000E+00,0.000E+00,1.976E+00,1.705E+00,
    8.553E-02,2.707E-01,9.962E-02,7.676E+00,0.000E+00,0.000E+00,8.046E+00,7.775E+00,
    1.000E-01,2.087E-01,9.924E-02,5.089E+00,0.000E+00,0.000E+00,5.396E+00,5.188E+00,
    1.500E-01,1.028E-01,9.508E-02,1.759E+00,0.000E+00,0.000E+00,1.957E+00,1.854E+00,
    2.000E-01,6.132E-02,8.987E-02,8.182E-01,0.000E+00,0.000E+00,9.694E-01,9.081E-01,
    3.000E-01,2.924E-02,8.053E-02,2.825E-01,0.000E+00,0.000E+00,3.922E-01,3.630E-01,
    4.000E-01,1.708E-02,7.322E-02,1.364E-01,0.000E+00,0.000E+00,2.267E-01,2.096E-01,
    5.000E-01,1.118E-02,6.745E-02,7.938E-02,0.000E+00,0.000E+00,1.580E-01,1.468E-01,
    6.000E-01,7.879E-03,6.276E-02,5.195E-02,0.000E+00,0.000E+00,1.226E-01,1.147E-01,
    8.000E-01,4.514E-03,5.545E-02,2.755E-02,0.000E+00,0.000E+00,8.751E-02,8.300E-02,
    1.000E+00,2.921E-03,5.003E-02,1.735E-02,0.000E+00,0.000E+00,7.031E-02,6.739E-02,
    1.022E+00,2.799E-03,4.950E-02,1.661E-02,0.000E+00,0.000E+00,6.891E-02,6.611E-02,
    1.250E+00,1.885E-03,4.485E-02,1.121E-02,3.710E-04,0.000E+00,5.831E-02,5.642E-02,
    1.500E+00,1.316E-03,4.081E-02,7.982E-03,1.767E-03,0.000E+00,5.187E-02,5.056E-02,
    2.000E+00,7.446E-04,3.489E-02,4.829E-03,5.348E-03,0.000E+00,4.581E-02,4.506E-02,
    2.044E+00,7.131E-04,3.444E-02,4.655E-03,5.663E-03,0.000E+00,4.548E-02,4.476E-02,
    3.000E+00,3.324E-04,2.748E-02,2.525E-03,1.176E-02,9.600E-06,4.211E-02,4.177E-02,
    4.000E+00,1.873E-04,2.293E-02,1.654E-03,1.693E-02,3.913E-05,4.175E-02,4.156E-02,
    5.000E+00,1.200E-04,1.981E-02,1.212E-03,2.126E-02,7.782E-05,4.248E-02,4.236E-02,
    6.000E+00,8.336E-05,1.751E-02,9.502E-04,2.500E-02,1.193E-04,4.366E-02,4.358E-02,
    7.000E+00,6.126E-05,1.574E-02,7.782E-04,2.828E-02,1.605E-04,4.502E-02,4.496E-02,
    8.000E+00,4.691E-05,1.433E-02,6.574E-04,3.123E-02,2.003E-04,4.647E-02,4.642E-02,
    9.000E+00,3.707E-05,1.317E-02,5.684E-04,3.394E-02,2.384E-04,4.796E-02,4.792E-02,
    1.000E+01,3.002E-05,1.220E-02,5.000E-04,3.642E-02,2.744E-04,4.943E-02,4.940E-02,
    1.100E+01,2.482E-05,1.139E-02,4.458E-04,3.869E-02,3.085E-04,5.085E-02,5.083E-02,
    1.200E+01,2.086E-05,1.068E-02,4.022E-04,4.084E-02,3.406E-04,5.228E-02,5.226E-02,
    1.300E+01,1.777E-05,1.006E-02,3.662E-04,4.284E-02,3.707E-04,5.366E-02,5.364E-02,
    1.400E+01,1.532E-05,9.517E-03,3.362E-04,4.470E-02,3.992E-04,5.497E-02,5.495E-02,
    1.500E+01,1.335E-05,9.034E-03,3.103E-04,4.644E-02,4.264E-04,5.622E-02,5.621E-02,
    1.600E+01,1.173E-05,8.604E-03,2.883E-04,4.806E-02,4.520E-04,5.741E-02,5.740E-02,
    1.800E+01,9.273E-06,7.864E-03,2.524E-04,5.100E-02,4.994E-04,5.963E-02,5.962E-02,
    2.000E+01,7.511E-06,7.251E-03,2.243E-04,5.360E-02,5.424E-04,6.162E-02,6.161E-02,
    2.200E+01,6.205E-06,6.736E-03,2.018E-04,5.598E-02,5.816E-04,6.351E-02,6.350E-02,
    2.400E+01,5.215E-06,6.294E-03,1.834E-04,5.813E-02,6.176E-04,6.523E-02,6.523E-02,
    2.600E+01,4.443E-06,5.911E-03,1.681E-04,6.014E-02,6.506E-04,6.687E-02,6.687E-02,
    2.800E+01,3.833E-06,5.575E-03,1.550E-04,6.194E-02,6.812E-04,6.835E-02,6.835E-02,
    3.000E+01,3.338E-06,5.280E-03,1.439E-04,6.361E-02,7.095E-04,6.975E-02,6.975E-02,
    4.000E+01,1.878E-06,4.196E-03,1.058E-04,7.042E-02,8.262E-04,7.555E-02,7.555E-02,
    5.000E+01,1.202E-06,3.503E-03,8.365E-05,7.549E-02,9.140E-04,7.999E-02,7.999E-02,
    6.000E+01,8.344E-07,3.017E-03,6.915E-05,7.941E-02,9.829E-04,8.348E-02,8.348E-02,
    8.000E+01,4.694E-07,2.380E-03,5.136E-05,8.518E-02,1.086E-03,8.870E-02,8.870E-02,
    1.000E+02,3.005E-07,1.975E-03,4.084E-05,8.925E-02,1.160E-03,9.243E-02,9.243E-02])
Tl=Tl.reshape((int(len(Tl)/8),8))

NaI_photopeak_rations_labels=["Energy [MeV]", "10x10", "8x8", "8x4", "5x5", "3x3", "2x2", "1x1", "[in. diameter, in. length]"]
NaI_photopeak_relations_geoms=np.array([[10,10],
                               [8,8],
                               [8,4],
                               [5,5],
                               [3,3],
                               [2,2],
                               [1,1]])*2.54
NaI_photopeak_ratios=np.array([[0.25,0.50,1.00,2.00,3.00,4.00,5.00,7.50,10.0],
                               [0.96,0.88,0.79,0.70,0.62,0.58,0.54,0.48,0.43],
                               [0.95,0.87,0.75,0.62,0.55,0.50,0.47,0.39,0.34],
                               [0.95,0.84,0.66,0.51,0.43,0.37,0.34,0.26,0.21],
                               [0.94,0.80,0.62,0.46,0.39,0.33,0.29,0.21,0.18],
                               [0.93,0.69,0.46,0.31,0.23,0.18,0.15,0.09,0.07],
                               [0.92,0.59,0.35,0.21,0.15,0.11,0.08,0.05,0.03],
                               [0.81,0.44,0.21,0.11,0.07,0.05,0.03,0.02,0.01]])


def photopeak_func1(E,a,b): #MeV
    return 1-a*np.exp(-b/E)

def photopeak_minimize1(p,E,r):
    return np.sum( ( photopeak_func1(E,p[0],p[1]) - r )**2 )
    
def photopeak_func2(E,a,b,c):
    return np.minimum( a*np.exp(-b*E) +c , 1 )

def photopeak_minimize2(p,E,r):
    return np.sum( ( photopeak_func2(E,p[0],p[1],p[2]) - r )**2 )

def fit_photopeak_func1(data=NaI_photopeak_ratios,ret=False):
    param=[]
    E=np.linspace(0.25,10,80)
    for geom in range(1,len(NaI_photopeak_ratios)):
        res=minimize(photopeak_minimize1,[1,1],(data[0,:],data[geom,:]))
        #plt.plot(data[0,:],data[geom,:],".",c="C"+str(geom-1))
        #plt.plot(E,photopeak_func1(E, res.x[0], res.x[1]),c="C"+str(geom-1),label=str(int(NaI_photopeak_relations_geoms[geom-1,0]*10)/10)+"x"+str(int(NaI_photopeak_relations_geoms[geom-1,1]*10)/10))
        param.append(res.x)
    #plt.legend()
    #plt.xlabel("Energy [MeV]")
    #plt.ylabel("Photopeak/Total Ratio")
    if ret:
        return np.array(param)
    #plt.savefig(p_plots+'NaI_photopeak_1.pdf',bbox_inches='tight')

NaI_func1_param=fit_photopeak_func1(ret=True)

def fit_photopeak_func2(data=NaI_photopeak_ratios):
    param=[]
    E=np.linspace(0.25,10,80)
    for geom in range(1,len(NaI_photopeak_ratios)):
        res=minimize(photopeak_minimize2,[1,1,0],(data[0,:],data[geom,:]))
        plt.plot(data[0,:],data[geom,:],".",c="C"+str(geom-1))
        plt.plot(E,photopeak_func2(E, res.x[0], res.x[1], res.x[2]),c="C"+str(geom-1),label=str(int(NaI_photopeak_relations_geoms[geom-1,0]*10)/10)+"x"+str(int(NaI_photopeak_relations_geoms[geom-1,1]*10)/10))
        param.append(res.x)
    plt.legend()
    plt.xlabel("Energy [MeV]")
    plt.ylabel("Photopeak/Total Ratio")
    plt.savefig(p_plots+'NaI_photopeak_2.pdf',bbox_inches='tight')
    #return np.array(param)

def fit_photopeak_param1_1_func1(D,H,a,b,c,d):
    return a*D**b*H**c+d

def minimize_photopeak_param1_1(p,D,H,act_param):
    return np.sum( ( fit_photopeak_param1_1_func1(D,H,p[0],p[1],p[2],p[3]) - act_param)**2 )
    

def fit_photopeak_param1(param=NaI_func1_param,ret=False):
    D,H,act_param1,act_param2=NaI_photopeak_relations_geoms[:,0], NaI_photopeak_relations_geoms[:,1], NaI_func1_param[:,0], NaI_func1_param[:,1]
    a=minimize( minimize_photopeak_param1_1, [1,1,1,0], (D,H,act_param1))
    
    b=minimize( minimize_photopeak_param1_1, [1,1,1,0], (D,H,act_param2))
    
    if ret:
        return a.x,b.x
    plt.plot(D**2*H,act_param1,".")
    plt.plot(D**2*H,fit_photopeak_param1_1_func1(D, H, a.x[0], a.x[1], a.x[2], a.x[3]))
    plt.plot(D**2*H,act_param2,".")
    plt.plot(D**2*H,fit_photopeak_param1_1_func1(D, H, b.x[0], b.x[1], b.x[2], b.x[3]))
    plt.savefig(p_plots+'NaI_photopeak_param_fits.pdf',bbox_inches='tight')

NaI_a,NaI_b=fit_photopeak_param1(ret=True)

#MeV
def D2_cell_photopeak_ratio(E):
    D,H=28.2,7.5
    a=fit_photopeak_param1_1_func1(D,H,NaI_a[0],NaI_a[1],NaI_a[2],NaI_a[3])
    b=fit_photopeak_param1_1_func1(D,H,NaI_b[0],NaI_b[1],NaI_b[2],NaI_b[3])
    return photopeak_func1(E, a, b)

def plot_photopeak_fitted_fits(data=NaI_photopeak_ratios):
    E=np.linspace(0.25,10,80)
    for geom in range(1,len(NaI_photopeak_ratios)):
        #plt.plot(data[0,:],data[geom,:],".",c="C"+str(geom-1))
        plt.plot(E,photopeak_func1(E, NaI_func1_param[geom-1,0], NaI_func1_param[geom-1,1]),c="C"+str(geom-1))
        D,H=NaI_photopeak_relations_geoms[geom-1,0],NaI_photopeak_relations_geoms[geom-1,1]
        a=fit_photopeak_param1_1_func1(D,H,NaI_a[0],NaI_a[1],NaI_a[2],NaI_a[3])
        b=fit_photopeak_param1_1_func1(D,H,NaI_b[0],NaI_b[1],NaI_b[2],NaI_b[3])
        plt.plot(E,photopeak_func1(E, a, b),"--",c="C"+str(geom-1),label=str(int(D*10)/10)+"x"+str(int(H*10)/10))
    plt.plot(E,D2_cell_photopeak_ratio(E),"--",c="C7",label="28.2x7.5")
    plt.legend()
    plt.xlabel("Energy [MeV]")
    plt.ylabel("Photopeak/Total Ratio")
    plt.savefig(p_plots+'NaI_photopeak_all.pdf',bbox_inches='tight')

def continue_log(value,x_data,y_data):
    if value<x_data[0] or value>=x_data[-1]:
        return 0
    for i in range(len(x_data)-1):
        if value>=x_data[i] and value<x_data[i+1]:
            s=np.log(y_data[i+1]/y_data[i])/np.log(x_data[i+1]/x_data[i])
            f=y_data[i]/(x_data[i]**s)
            return f*value**s


def NaI_total_cs(E):
    out=np.zeros(len(E))
    for i in range(len(E)):
        out[i]=(22.989769*rd.continue_log(E[i],Na[:,0],Na[0:,7])+126.90447*rd.continue_log(E[i],I[:,0],I[0:,7]))/(22.989769+126.90447)
    return out

def NaI_photoel_cs(E):
    out=np.zeros(len(E))
    for i in range(len(E)):
        out[i]=(22.989769*rd.continue_log(E[i],Na[:,0],Na[0:,3])+126.90447*rd.continue_log(E[i],I[:,0],I[0:,3]))/(22.989769+126.90447)
    return out

def NaI_incoh_cs(E,out=None):
    if out is None:
        out = np.zeros(len(E))
    for i in range(len(E)):
        out[i]=(22.989769*rd.continue_log(E[i],Na[:,0],Na[0:,2])+126.90447*rd.continue_log(E[i],I[:,0],I[0:,2]))/(22.989769+126.90447)
    return out

def klein_nishina_diff_energy_cs(E1,E2):
    theta=np.arccos( 1-0.511*( (E1-E2) / (E1*E2) ) )
    if np.isnan(theta):
        return 0
    P=E2/E1
    return P**2 * (P+1/P-np.sin(theta)**2) * (1/E2**2 + 1/E1)

  
def calc_total_kn_cs():
    E1s=np.geomspace(0.001,100,1000)
    outs=np.zeros(len(E1s))
    for i in range(len(E1s)):
        Ec=E1s[i]*((1/( 1+(2*E1s[i]/0.511)) ) )*1.00001
        E2s=np.geomspace(Ec,E1s[i],1000)
        cs=np.zeros(len(E2s))
        for j in range(len(E2s)):
            cs[j]=klein_nishina_diff_energy_cs(E1s[i], E2s[j])
        outs[i]=exp_int_solver(E2s,cs)
    plt.plot(E1s,outs)
    plt.xscale("log")
    plt.yscale("log")
    return outs

#E1s=np.geomspace(0.001,100,1000)
kn_cs_e=np.array([5.18349409, 5.1835473 , 5.1835959 , 5.18363989, 5.18367929,
       5.18371411, 5.18374433, 5.18376997, 5.18379104, 5.18380753,
       5.18381945, 5.1838268 , 5.18382958, 5.18382779, 5.18382144,
       5.18381051, 5.18379502, 5.18377496, 5.18375032, 5.18372111,
       5.18368732, 5.18364894, 5.18360598, 5.18355843, 5.18350627,
       5.18344952, 5.18338815, 5.18332216, 5.18325155, 5.1831763 ,
       5.18309641, 5.18301186, 5.18292265, 5.18282876, 5.18273019,
       5.18262692, 5.18251894, 5.18240623, 5.18228878, 5.18216658,
       5.18203962, 5.18190787, 5.18177132, 5.18162995, 5.18148375,
       5.1813327 , 5.18117677, 5.18101596, 5.18085023, 5.18067958,
       5.18050397, 5.18032339, 5.18013782, 5.17994722, 5.17975159,
       5.17955089, 5.17934509, 5.17913418, 5.17891813, 5.17869691,
       5.17847049, 5.17823885, 5.17800195, 5.17775978, 5.17751229,
       5.17725945, 5.17700124, 5.17673763, 5.17646858, 5.17619406,
       5.17591403, 5.17562846, 5.17533731, 5.17504056, 5.17473816,
       5.17443007, 5.17411626, 5.17379669, 5.17347132, 5.17314011,
       5.17280302, 5.17246   , 5.17211102, 5.17175604, 5.171395  ,
       5.17102787, 5.1706546 , 5.17027514, 5.16988945, 5.16949748,
       5.16909919, 5.16869452, 5.16828343, 5.16786586, 5.16744176,
       5.16701109, 5.16657379, 5.16612981, 5.16567909, 5.16522158,
       5.16475722, 5.16428596, 5.16380775, 5.16332251, 5.1628302 ,
       5.16233075, 5.1618241 , 5.1613102 , 5.16078898, 5.16026038,
       5.15972433, 5.15918078, 5.15862965, 5.15807088, 5.1575044 ,
       5.15693015, 5.15634805, 5.15575804, 5.15516004, 5.154554  ,
       5.15393982, 5.15331744, 5.15268679, 5.1520478 , 5.15140037,
       5.15074445, 5.15007995, 5.14940679, 5.1487249 , 5.14803419,
       5.14733458, 5.14662599, 5.14590834, 5.14518154, 5.14444551,
       5.14370016, 5.1429454 , 5.14218116, 5.14140733, 5.14062383,
       5.13983056, 5.13902744, 5.13821438, 5.13739127, 5.13655802,
       5.13571454, 5.13486074, 5.1339965 , 5.13312174, 5.13223635,
       5.13134024, 5.13043329, 5.12951541, 5.12858649, 5.12764643,
       5.12669512, 5.12573245, 5.12475831, 5.1237726 , 5.1227752 ,
       5.121766  , 5.12074489, 5.11971176, 5.11866648, 5.11760894,
       5.11653903, 5.11545663, 5.11436161, 5.11325385, 5.11213324,
       5.11099965, 5.10985295, 5.10869302, 5.10751973, 5.10633296,
       5.10513257, 5.10391844, 5.10269043, 5.10144841, 5.10019225,
       5.09892181, 5.09763695, 5.09633755, 5.09502345, 5.09369452,
       5.09235062, 5.0909916 , 5.08961733, 5.08822766, 5.08682243,
       5.08540151, 5.08396475, 5.08251199, 5.08104309, 5.07955789,
       5.07805624, 5.07653799, 5.07500297, 5.07345104, 5.07188203,
       5.07029579, 5.06869215, 5.06707095, 5.06543204, 5.06377523,
       5.06210038, 5.06040731, 5.05869585, 5.05696584, 5.0552171 ,
       5.05344946, 5.05166275, 5.0498568 , 5.04803143, 5.04618646,
       5.04432172, 5.04243703, 5.0405322 , 5.03860706, 5.03666142,
       5.03469509, 5.03270791, 5.03069967, 5.0286702 , 5.02661929,
       5.02454677, 5.02245245, 5.02033612, 5.01819761, 5.01603671,
       5.01385323, 5.01164698, 5.00941775, 5.00716535, 5.00488959,
       5.00259025, 5.00026714, 4.99792006, 4.99554881, 4.99315317,
       4.99073295, 4.98828794, 4.98581793, 4.98332272, 4.98080209,
       4.97825584, 4.97568376, 4.97308563, 4.97046125, 4.96781039,
       4.96513286, 4.96242843, 4.95969688, 4.95693801, 4.9541516 ,
       4.95133743, 4.94849529, 4.94562494, 4.94272619, 4.9397988 ,
       4.93684257, 4.93385726, 4.93084266, 4.92779855, 4.9247247 ,
       4.92162091, 4.91848693, 4.91532256, 4.91212757, 4.90890173,
       4.90564484, 4.90235665, 4.89903696, 4.89568553, 4.89230215,
       4.88888659, 4.88543864, 4.88195806, 4.87844464, 4.87489815,
       4.87131838, 4.8677051 , 4.86405809, 4.86037713, 4.85666201,
       4.8529125 , 4.84912838, 4.84530944, 4.84145546, 4.83756622,
       4.83364151, 4.82968111, 4.82568481, 4.82165239, 4.81758365,
       4.81347837, 4.80933635, 4.80515737, 4.80094124, 4.79668773,
       4.79239666, 4.78806782, 4.783701  , 4.77929601, 4.77485264,
       4.77037072, 4.76585003, 4.76129039, 4.75669161, 4.7520535 ,
       4.74737588, 4.74265856, 4.73790136, 4.7331041 , 4.7282666 ,
       4.7233887 , 4.71847022, 4.713511  , 4.70851086, 4.70346964,
       4.6983872 , 4.69326335, 4.68809797, 4.68289089, 4.67764196,
       4.67235105, 4.66701802, 4.66164272, 4.65622502, 4.6507648 ,
       4.64526193, 4.63971628, 4.63412775, 4.62849621, 4.62282156,
       4.61710369, 4.61134251, 4.6055379 , 4.59968979, 4.59379809,
       4.5878627 , 4.58188356, 4.5758606 , 4.56979373, 4.56368291,
       4.55752807, 4.55132916, 4.54508613, 4.53879894, 4.53246755,
       4.52609193, 4.51967206, 4.51320792, 4.50669949, 4.50014676,
       4.49354973, 4.48690841, 4.4802228 , 4.47349292, 4.46671879,
       4.45990044, 4.45303791, 4.44613123, 4.43918045, 4.43218563,
       4.42514682, 4.4180641 , 4.41093754, 4.40376722, 4.39655322,
       4.38929565, 4.38199459, 4.37465017, 4.36726249, 4.35983168,
       4.35235787, 4.34484119, 4.33728179, 4.32967982, 4.32203544,
       4.31434881, 4.30662011, 4.29884951, 4.2910372 , 4.28318338,
       4.27528825, 4.26735203, 4.25937491, 4.25135714, 4.24329894,
       4.23520055, 4.22706221, 4.21888419, 4.21066674, 4.20241012,
       4.19411462, 4.18578052, 4.1774081 , 4.16899767, 4.16054952,
       4.15206397, 4.14354134, 4.13498195, 4.12638613, 4.11775422,
       4.10908657, 4.10038353, 4.09164546, 4.08287272, 4.07406569,
       4.06522475, 4.05635027, 4.04744265, 4.03850229, 4.02952959,
       4.02052495, 4.01148881, 4.00242156, 3.99332365, 3.9841955 ,
       3.97503754, 3.96585023, 3.95663401, 3.94738933, 3.93811664,
       3.92881642, 3.91948912, 3.91013521, 3.90075518, 3.8913495 ,
       3.88191865, 3.87246312, 3.86298341, 3.85347999, 3.84395338,
       3.83440407, 3.82483256, 3.81523937, 3.80562499, 3.79598995,
       3.78633475, 3.77665991, 3.76696594, 3.75725338, 3.74752272,
       3.73777451, 3.72800926, 3.71822749, 3.70842974, 3.69861652,
       3.68878836, 3.6789458 , 3.66908934, 3.65921953, 3.64933689,
       3.63944193, 3.6295352 , 3.6196172 , 3.60968847, 3.59974952,
       3.58980088, 3.57984306, 3.56987658, 3.55990196, 3.5499197 ,
       3.53993032, 3.52993433, 3.51993223, 3.50992452, 3.49991171,
       3.48989428, 3.47987274, 3.46984758, 3.45981927, 3.4497883 ,
       3.43975516, 3.42972031, 3.41968422, 3.40964737, 3.39961021,
       3.38957321, 3.3795368 , 3.36950145, 3.3594676 , 3.34943568,
       3.33940612, 3.32937936, 3.31935582, 3.30933591, 3.29932005,
       3.28930864, 3.27930209, 3.26930078, 3.25930512, 3.24931548,
       3.23933223, 3.22935576, 3.21938643, 3.2094246 , 3.19947062,
       3.18952484, 3.1795876 , 3.16965924, 3.15974009, 3.14983047,
       3.1399307 , 3.13004109, 3.12016195, 3.11029357, 3.10043625,
       3.09059027, 3.08075593, 3.07093348, 3.0611232 , 3.05132536,
       3.0415402 , 3.03176798, 3.02200896, 3.01226335, 3.0025314 ,
       2.99281334, 2.98310939, 2.97341976, 2.96374467, 2.95408432,
       2.94443892, 2.93480864, 2.9251937 , 2.91559427, 2.90601052,
       2.89644265, 2.8868908 , 2.87735516, 2.86783587, 2.85833311,
       2.848847  , 2.83937771, 2.82992538, 2.82049013, 2.81107212,
       2.80167146, 2.79228828, 2.78292271, 2.77357486, 2.76424485,
       2.75493279, 2.74563878, 2.73636294, 2.72710536, 2.71786614,
       2.70864538, 2.69944317, 2.6902596 , 2.68109475, 2.67194872,
       2.66282158, 2.65371341, 2.64462429, 2.6355543 , 2.62650351,
       2.61747199, 2.60845981, 2.59946704, 2.59049375, 2.58153999,
       2.57260584, 2.56369136, 2.5547966 , 2.54592162, 2.53706649,
       2.52823127, 2.519416  , 2.51062074, 2.50184555, 2.49309049,
       2.4843556 , 2.47564094, 2.46694656, 2.45827252, 2.44961886,
       2.44098564, 2.43237291, 2.42378071, 2.41520911, 2.40665815,
       2.39812789, 2.38961836, 2.38112963, 2.37266175, 2.36421476,
       2.35578873, 2.34738369, 2.33899971, 2.33063684, 2.32229512,
       2.31397462, 2.30567538, 2.29739746, 2.28914092, 2.2809058 ,
       2.27269218, 2.26450009, 2.25632961, 2.24818078, 2.24005367,
       2.23194833, 2.22386482, 2.2158032 , 2.20776353, 2.19974588,
       2.1917503 , 2.18377685, 2.17582561, 2.16789663, 2.15998997,
       2.1521057 , 2.14424389, 2.13640459, 2.12858788, 2.12079383,
       2.11302249, 2.10527394, 2.09754824, 2.08984547, 2.08216569,
       2.07450896, 2.06687537, 2.05926498, 2.05167786, 2.04411407,
       2.0365737 , 2.02905681, 2.02156348, 2.01409377, 2.00664775,
       1.9992255 , 1.99182709, 1.9844526 , 1.97710208, 1.96977563,
       1.9624733 , 1.95519516, 1.9479413 , 1.94071179, 1.93350668,
       1.92632607, 1.91917001, 1.91203857, 1.90493184, 1.89784987,
       1.89079274, 1.88376052, 1.87675328, 1.86977108, 1.862814  ,
       1.8558821 , 1.84897545, 1.84209412, 1.83523816, 1.82840766,
       1.82160266, 1.81482325, 1.80806947, 1.80134139, 1.79463908,
       1.78796259, 1.78131198, 1.77468732, 1.76808866, 1.76151607,
       1.75496958, 1.74844927, 1.74195518, 1.73548738, 1.7290459 ,
       1.72263081, 1.71624215, 1.70987997, 1.70354432, 1.69723524,
       1.69095279, 1.68469701, 1.67846793, 1.6722656 , 1.66609006,
       1.65994136, 1.65381952, 1.64772459, 1.64165659, 1.63561557,
       1.62960156, 1.62361458, 1.61765467, 1.61172185, 1.60581615,
       1.5999376 , 1.59408623, 1.58826204, 1.58246507, 1.57669533,
       1.57095285, 1.56523763, 1.5595497 , 1.55388906, 1.54825573,
       1.54264972, 1.53707104, 1.53151969, 1.52599569, 1.52049903,
       1.51502972, 1.50958776, 1.50417314, 1.49878588, 1.49342596,
       1.48809338, 1.48278813, 1.47751021, 1.4722596 , 1.4670363 ,
       1.46184029, 1.45667155, 1.45153008, 1.44641586, 1.44132886,
       1.43626907, 1.43123646, 1.42623102, 1.42125271, 1.41630151,
       1.4113774 , 1.40648034, 1.4016103 , 1.39676726, 1.39195118,
       1.38716202, 1.38239975, 1.37766433, 1.37295572, 1.36827389,
       1.36361878, 1.35899036, 1.35438858, 1.3498134 , 1.34526477,
       1.34074264, 1.33624696, 1.33177769, 1.32733476, 1.32291812,
       1.31852773, 1.31416352, 1.30982544, 1.30551343, 1.30122742,
       1.29696737, 1.2927332 , 1.28852486, 1.28434228, 1.28018539,
       1.27605413, 1.27194843, 1.26786822, 1.26381344, 1.25978401,
       1.25577986, 1.25180092, 1.24784712, 1.24391837, 1.24001461,
       1.23613576, 1.23228174, 1.22845248, 1.22464789, 1.22086789,
       1.21711241, 1.21338136, 1.20967466, 1.20599222, 1.20233397,
       1.19869982, 1.19508967, 1.19150346, 1.18794108, 1.18440245,
       1.18088749, 1.1773961 , 1.17392819, 1.17048367, 1.16706246,
       1.16366446, 1.16028958, 1.15693772, 1.1536088 , 1.15030272,
       1.14701937, 1.14375868, 1.14052055, 1.13730487, 1.13411155,
       1.13094049, 1.12779161, 1.12466479, 1.12155995, 1.11847698,
       1.11541578, 1.11237626, 1.10935831, 1.10636184, 1.10338675,
       1.10043293, 1.09750028, 1.09458871, 1.0916981 , 1.08882837,
       1.08597941, 1.08315111, 1.08034337, 1.0775561 , 1.07478918,
       1.07204252, 1.06931601, 1.06660955, 1.06392303, 1.06125636,
       1.05860943, 1.05598213, 1.05337436, 1.05078601, 1.048217  ,
       1.0456672 , 1.04313651, 1.04062484, 1.03813207, 1.03565811,
       1.03320285, 1.03076618, 1.028348  , 1.0259482 , 1.02356669,
       1.02120336, 1.01885811, 1.01653082, 1.0142214 , 1.01192974,
       1.00965575, 1.00739931, 1.00516032, 1.00293868, 1.00073429,
       0.99854704, 0.99637683, 0.99422356, 0.99208712, 0.98996742,
       0.98786435, 0.98577781, 0.98370769, 0.9816539 , 0.97961633,
       0.97759489, 0.97558947, 0.97359996, 0.97162628, 0.96966832,
       0.96772598, 0.96579916, 0.96388776, 0.96199168, 0.96011082,
       0.95824509, 0.95639438, 0.9545586 , 0.95273764, 0.95093142,
       0.94913984, 0.94736279, 0.94560018, 0.94385192, 0.9421179 ,
       0.94039804, 0.93869224, 0.93700039, 0.93532242, 0.93365822,
       0.93200769, 0.93037076, 0.92874731, 0.92713727, 0.92554053,
       0.923957  , 0.9223866 , 0.92082923, 0.9192848 , 0.91775322,
       0.9162344 , 0.91472824, 0.91323467, 0.91175358, 0.9102849 ,
       0.90882853, 0.90738438, 0.90595238, 0.90453242, 0.90312442,
       0.9017283 , 0.90034397, 0.89897135, 0.89761034, 0.89626087,
       0.89492285, 0.8935962 , 0.89228083, 0.89097666, 0.88968361,
       0.88840159, 0.88713052, 0.88587032, 0.88462092, 0.88338222,
       0.88215415, 0.88093664, 0.87972959, 0.87853293, 0.87734659,
       0.87617048, 0.87500452, 0.87384865, 0.87270277, 0.87156683,
       0.87044073, 0.86932441, 0.86821779, 0.86712079, 0.86603334,
       0.86495537, 0.86388681, 0.86282757, 0.86177759, 0.8607368 ,
       0.85970511, 0.85868248, 0.85766881, 0.85666405, 0.85566811,
       0.85468094, 0.85370246, 0.85273261, 0.85177131, 0.85081849,
       0.8498741 , 0.84893806, 0.84801031, 0.84709078, 0.8461794 ,
       0.84527611, 0.84438085, 0.84349354, 0.84261413, 0.84174256,
       0.84087875, 0.84002264, 0.83917418, 0.83833331, 0.83749995,
       0.83667405, 0.83585554, 0.83504438, 0.83424049, 0.83344382,
       0.83265431, 0.83187189, 0.83109652, 0.83032813, 0.82956667,
       0.82881207, 0.82806429, 0.82732326, 0.82658893, 0.82586124,
       0.82514014, 0.82442558, 0.82371749, 0.82301583, 0.82232054,
       0.82163156, 0.82094885, 0.82027235, 0.81960201, 0.81893778,
       0.81827961, 0.81762744, 0.81698123, 0.81634092, 0.81570646,
       0.81507781, 0.81445491, 0.81383772, 0.81322619, 0.81262026])

def NaI_compton_cs(E1, E2, out=None, incoh=None):
    if out is None:
        out = np.zeros(len(E1))
    if incoh is None:
        incoh = np.zeros(len(E1))
    incoh=NaI_incoh_cs(E1,incoh)
    E3=np.geomspace(0.001,100,1000)
    for i in range(len(E1)):
        out[i]=klein_nishina_diff_energy_cs(E1[i], E2)/continue_log(E1[i], E3, kn_cs_e)*incoh[i]
    return out

def exp_int_solver(domain_values,range_values):
    r= (domain_values[-1] / domain_values[0]) ** (1/(len(domain_values)-1))
    weights=np.zeros(len(domain_values))
    f=(r-1)/2
    weights[:-1]=f*domain_values[:-1]
    weights[1:]+=f*domain_values[:-1]
    return np.sum(weights*range_values)


def main_loop(E):
    E_res=100
    n=8
    max_loop=5
    
    Es=np.geomspace(0.01,E,E_res)
    
    S=np.zeros((2,n,E_res))
    Q=np.zeros((2,n))
    
    P_T=D2_cell_photopeak_ratio(E)
    E_1=np.geomspace(0.001,E,E_res) # Use Compton Edge Limits?
    Q[0,0]=NaI_photoel_cs(np.array([E]))/NaI_total_cs(np.array([E]))
    for i in range(E_res):
        S[0,0,i]=NaI_compton_cs(np.array([E]), E_1[i])/NaI_total_cs(np.array([E]))
    E_c_1=0.511*E/(0.511+2*E)
    T=3.67*7.5
    dT=0
    
    # Init Arrays 
    Compton = np.zeros(E_res)
    
    for T_iter in range(max_loop):
        
        
        for loop in range(1,n):
            print(T_iter, loop)
            
            #Psi=S[0,loop-1,:]+dT*S[1,loop-1,:]
            Exp=np.exp(-NaI_total_cs(Es)*T)
            Photoel=NaI_photoel_cs(Es)
            Total=NaI_total_cs(Es)
            
            Q[0,loop]=exp_int_solver(Es,
                                     S[0,loop-1,:] * (1-Exp) * Photoel / Total )
            Q[1,loop]=(exp_int_solver(Es,
                                      S[0,loop-1,:] * (Exp) * Photoel )
                       +exp_int_solver(Es,
                                       S[1,loop-1,:] * (1-Exp) * Photoel / Total))
            
            for i in range(E_res):
                Compton=NaI_compton_cs(Es,Es[i],Compton)
                
                
                
                S[0,loop,i]=exp_int_solver(Es,
                                           S[0,loop-1,:] * (1-Exp) * Compton / Total)
                S[1,loop,i]=(exp_int_solver(Es,
                                            S[0,loop-1,:] * Exp * Compton) 
                             +exp_int_solver(Es,
                                             S[1,loop-1,:] * (1-Exp) * Compton / Total))
                
            
        dT = ( P_T - np.sum( Q[0,:] ) ) / np.sum( Q[1,:] )

        
        print (T,dT)
        
        if abs(dT)<0.001:
            break
        else:
            
            T+=dT
            dT=0
        if T<0:
            break
            
    for loop in range(n):
        Psi=S[0,loop,:]+dT*S[1,loop,:]
        plt.plot(Es,Psi,label=str(loop))
    plt.legend()
    plt.xscale("log")
    plt.yscale("log")
    print(P_T)
    print(Q)
        
        
        

def T_convergence():
    # timer1=0
    # timer2=0
    # timer3=0
    # timer4=0
    # timer5=0
    
    
    E_res_sample=[10]
    E_sample=[5]
    n_sample=[8]

    
    T_sample=np.geomspace(1.,1.0e3,10)
    
    res=np.zeros((2,len(E_res_sample),len(E_sample),len(n_sample),len(T_sample)))
    
    for i in range(len(E_res_sample)):
        E_res=E_res_sample[i]
        
        for j in range(len(E_sample)): #asdf
            E=E_sample[j]
            for k in range(len(n_sample)):
                n=n_sample[k]
                for l in range(len(T_sample)):
                    start5=time.time()
                    T=T_sample[l]
                    Es=np.geomspace(0.01,E,E_res)
                    
                    S=np.zeros((2,n,E_res))
                    Q=np.zeros((2,n))
                    
                    P_T=D2_cell_photopeak_ratio(E)
                    E_1=np.geomspace(0.001,E,E_res) # Use Compton Edge Limits?
                    Q[0,0]=NaI_photoel_cs(np.array([E]))/NaI_total_cs(np.array([E]))
                    
                    start1=time.time()
                    for loop in range(E_res):
                        S[0,0,loop]=NaI_compton_cs(np.array([E]), E_1[loop])/NaI_total_cs(np.array([E]))
                    dT=0
                    # end1=time.time()
                    # timer1 += end1 - start1
                
                    # end5=time.time()
                    # timer5+=end5-start5
                    # start3=time.time()
                    for loop in range(1,n):
                        # start4=time.time()
                        print(E_res, E, n, T, loop)
                        
                        #Psi=S[0,loop-1,:]+dT*S[1,loop-1,:]
                        Exp=np.exp(-NaI_total_cs(Es)*T)
                        Photoel=NaI_photoel_cs(Es)
                        Total=NaI_total_cs(Es)
                        
                        Q[0,loop]=exp_int_solver(Es,
                                                 S[0,loop-1,:] * (1-Exp) * Photoel / Total )
                        Q[1,loop]=(exp_int_solver(Es,
                                                  S[0,loop-1,:] * (Exp) * Photoel )
                                   +exp_int_solver(Es,
                                                   S[1,loop-1,:] * (1-Exp) * Photoel / Total))
                        # end4=time.time()
                        # timer4+= end4 - start4
                        # start2=time.time()
                        for loop2 in range(E_res):
                            Compton=NaI_compton_cs(Es,Es[loop2])
                            
                            
                            
                            S[0,loop,loop2]=exp_int_solver(Es,
                                                       S[0,loop-1,:] * (1-Exp) * Compton / Total)
                            S[1,loop,loop2]=(exp_int_solver(Es,
                                                        S[0,loop-1,:] * Exp * Compton) 
                                         +exp_int_solver(Es,
                                                         S[1,loop-1,:] * (1-Exp) * Compton / Total))
                    #     end2=time.time()
                    #     timer2 += end2 - start2
                    # end3=time.time()
                    # timer3 += end3 - start3
                            
                        
                    dT = ( P_T - np.sum( Q[0,:] ) ) / np.sum( Q[1,:] )
                    res[0,i,j,k,l]=P_T - np.sum( Q[0,:] )
                    res[1,i,j,k,l]=dT
                    
    # print(timer1)
    # print(timer2)
    # print(timer3)
    # print(timer4)
    # print(timer5)
    
    # for i in range(len(n_sample)):
    #     for j in range(len(E_res_sample)):
    #         plt.plot(T_sample,res[0,j,0,i,:],label="E:5MeV R:{R} n:{n}".format(R=E_res_sample[j],n=n_sample[i]))
    # plt.legend()
    # plt.xscale("log")
    # plt.xlabel("T-value")
    # plt.ylabel("$\Delta$P")
    # plt.axhline(y=0,c="black",linewidth=0.5)
    # #plt.plot(T_sample,res[1,0,0,0,:])
    
    # #plt.savefig(p_plots+'P_Deviation_5MeV_R_n.pdf',bbox_inches='tight')
    # plt.savefig(p_plots+'P_Deviation_5MeV_R.pdf',bbox_inches='tight')
















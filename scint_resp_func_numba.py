import numpy as np
import matplotlib.pyplot as plt
import sys
sys.path.append("D:\\MPE\\COMPTEL_Simulation_Project\\Werkstudent\\Python_Code/")

import reading_data as rd
from scipy.optimize import minimize
from numba import njit,vectorize,prange
import time

import logging

numba_logger = logging.getLogger('numba')
numba_logger.setLevel(logging.WARNING)

p_plots='D:\\MPE/'

p_NaI=3.67

#Energy [MeV], Coh. Scat., Inc. Scat, Photel. Abs., Nucl. Pr. Prd., Elec. Pr. Prd., Tot. w/ Coh., Tot. wo/ Coh. [cm2/g]
Na=np.array([1.000E-03,1.919E+00,1.270E-02,6.523E+02,0.000E+00,0.000E+00,6.542E+02,6.523E+02,
    1.035E-03,1.909E+00,1.326E-02,5.939E+02,0.000E+00,0.000E+00,5.958E+02,5.939E+02,
    1.072E-03,1.898E+00,1.384E-02,5.412E+02,0.000E+00,0.000E+00,5.431E+02,5.412E+02,
    1.072E-03,1.898E+00,1.384E-02,6.433E+03,0.000E+00,0.000E+00,6.435E+03,6.433E+03,
    1.500E-03,1.775E+00,1.994E-02,3.193E+03,0.000E+00,0.000E+00,3.195E+03,3.193E+03,
    2.000E-03,1.641E+00,2.638E-02,1.519E+03,0.000E+00,0.000E+00,1.521E+03,1.519E+03,
    3.000E-03,1.403E+00,3.948E-02,5.056E+02,0.000E+00,0.000E+00,5.070E+02,5.056E+02,
    4.000E-03,1.185E+00,5.284E-02,2.249E+02,0.000E+00,0.000E+00,2.261E+02,2.250E+02,
    5.000E-03,9.925E-01,6.557E-02,1.183E+02,0.000E+00,0.000E+00,1.194E+02,1.184E+02,
    6.000E-03,8.306E-01,7.717E-02,6.939E+01,0.000E+00,0.000E+00,7.030E+01,6.947E+01,
    8.000E-03,5.931E-01,9.624E-02,2.950E+01,0.000E+00,0.000E+00,3.018E+01,2.959E+01,
    1.000E-02,4.409E-01,1.101E-01,1.502E+01,0.000E+00,0.000E+00,1.557E+01,1.513E+01,
    1.500E-02,2.470E-01,1.300E-01,4.317E+00,0.000E+00,0.000E+00,4.694E+00,4.447E+00,
    2.000E-02,1.612E-01,1.397E-01,1.756E+00,0.000E+00,0.000E+00,2.057E+00,1.896E+00,
    3.000E-02,8.597E-02,1.484E-01,4.854E-01,0.000E+00,0.000E+00,7.198E-01,6.338E-01,
    4.000E-02,5.325E-02,1.509E-01,1.927E-01,0.000E+00,0.000E+00,3.969E-01,3.437E-01,
    5.000E-02,3.607E-02,1.506E-01,9.370E-02,0.000E+00,0.000E+00,2.804E-01,2.443E-01,
    6.000E-02,2.600E-02,1.489E-01,5.187E-02,0.000E+00,0.000E+00,2.268E-01,2.008E-01,
    8.000E-02,1.533E-02,1.440E-01,2.032E-02,0.000E+00,0.000E+00,1.796E-01,1.643E-01,
    1.000E-01,1.009E-02,1.386E-01,9.826E-03,0.000E+00,0.000E+00,1.585E-01,1.484E-01,
    1.500E-01,4.642E-03,1.262E-01,2.638E-03,0.000E+00,0.000E+00,1.335E-01,1.289E-01,
    2.000E-01,2.648E-03,1.162E-01,1.053E-03,0.000E+00,0.000E+00,1.199E-01,1.173E-01,
    3.000E-01,1.191E-03,1.015E-01,2.999E-04,0.000E+00,0.000E+00,1.029E-01,1.018E-01,
    4.000E-01,6.727E-04,9.105E-02,1.292E-04,0.000E+00,0.000E+00,9.186E-02,9.118E-02,
    5.000E-01,4.314E-04,8.322E-02,6.989E-05,0.000E+00,0.000E+00,8.372E-02,8.329E-02,
    6.000E-01,2.999E-04,7.701E-02,4.359E-05,0.000E+00,0.000E+00,7.736E-02,7.706E-02,
    8.000E-01,1.689E-04,6.769E-02,2.203E-05,0.000E+00,0.000E+00,6.788E-02,6.771E-02,
    1.000E+00,1.081E-04,6.088E-02,1.369E-05,0.000E+00,0.000E+00,6.100E-02,6.089E-02,
    1.022E+00,1.035E-04,6.022E-02,1.287E-05,0.000E+00,0.000E+00,6.034E-02,6.023E-02,
    1.250E+00,6.923E-05,5.443E-02,8.731E-06,2.585E-05,0.000E+00,5.454E-02,5.447E-02,
    1.500E+00,4.809E-05,4.948E-02,6.329E-06,1.421E-04,0.000E+00,4.968E-02,4.963E-02,
    2.000E+00,2.706E-05,4.223E-02,3.963E-06,5.640E-04,0.000E+00,4.282E-02,4.279E-02,
    2.044E+00,2.590E-05,4.170E-02,3.832E-06,6.080E-04,0.000E+00,4.234E-02,4.231E-02,
    3.000E+00,1.202E-05,3.324E-02,2.200E-06,1.608E-03,1.163E-05,3.488E-02,3.486E-02,
    4.000E+00,6.764E-06,2.771E-02,1.504E-06,2.604E-03,4.747E-05,3.037E-02,3.037E-02,
    5.000E+00,4.330E-06,2.394E-02,1.138E-06,3.492E-03,9.459E-05,2.753E-02,2.752E-02,
    6.000E+00,3.007E-06,2.116E-02,9.132E-07,4.285E-03,1.453E-04,2.559E-02,2.559E-02,
    7.000E+00,2.209E-06,1.902E-02,7.617E-07,4.993E-03,1.959E-04,2.421E-02,2.421E-02,
    8.000E+00,1.691E-06,1.731E-02,6.530E-07,5.632E-03,2.450E-04,2.319E-02,2.318E-02,
    9.000E+00,1.336E-06,1.591E-02,5.713E-07,6.208E-03,2.921E-04,2.241E-02,2.241E-02,
    1.000E+01,1.082E-06,1.474E-02,5.074E-07,6.735E-03,3.369E-04,2.181E-02,2.181E-02,
    1.100E+01,8.946E-07,1.375E-02,4.566E-07,7.211E-03,3.796E-04,2.134E-02,2.134E-02,
    1.200E+01,7.515E-07,1.289E-02,4.147E-07,7.649E-03,4.199E-04,2.096E-02,2.096E-02,
    1.300E+01,6.405E-07,1.215E-02,3.801E-07,8.055E-03,4.579E-04,2.066E-02,2.066E-02,
    1.400E+01,5.522E-07,1.149E-02,3.505E-07,8.432E-03,4.940E-04,2.042E-02,2.042E-02,
    1.500E+01,4.809E-07,1.091E-02,3.253E-07,8.786E-03,5.286E-04,2.023E-02,2.022E-02,
    1.600E+01,4.228E-07,1.039E-02,3.036E-07,9.116E-03,5.614E-04,2.007E-02,2.007E-02,
    1.800E+01,3.340E-07,9.496E-03,2.674E-07,9.724E-03,6.224E-04,1.984E-02,1.984E-02,
    2.000E+01,2.706E-07,8.757E-03,2.392E-07,1.027E-02,6.782E-04,1.970E-02,1.970E-02,
    2.200E+01,2.236E-07,8.134E-03,2.163E-07,1.076E-02,7.295E-04,1.962E-02,1.962E-02,
    2.400E+01,1.879E-07,7.599E-03,1.974E-07,1.121E-02,7.769E-04,1.959E-02,1.959E-02,
    2.600E+01,1.601E-07,7.135E-03,1.815E-07,1.162E-02,8.212E-04,1.957E-02,1.957E-02,
    2.800E+01,1.380E-07,6.732E-03,1.680E-07,1.200E-02,8.621E-04,1.959E-02,1.959E-02,
    3.000E+01,1.203E-07,6.376E-03,1.563E-07,1.235E-02,9.006E-04,1.962E-02,1.962E-02,
    4.000E+01,6.764E-08,5.066E-03,1.160E-07,1.379E-02,1.062E-03,1.992E-02,1.992E-02,
    5.000E+01,4.330E-08,4.228E-03,9.228E-08,1.488E-02,1.187E-03,2.029E-02,2.029E-02,
    6.000E+01,3.007E-08,3.644E-03,7.659E-08,1.574E-02,1.287E-03,2.067E-02,2.067E-02,
    8.000E+01,1.691E-08,2.874E-03,5.716E-08,1.703E-02,1.443E-03,2.135E-02,2.135E-02,
    1.000E+02,1.082E-08,2.385E-03,4.558E-08,1.796E-02,1.559E-03,2.191E-02,2.191E-02])
Na=Na.reshape((int(len(Na)/8),8))

I=np.array([1.000E-03,8.418E+00,4.688E-03,9.087E+03,0.000E+00,0.000E+00,9.096E+03,9.087E+03,
    1.035E-03,8.388E+00,4.972E-03,8.450E+03,0.000E+00,0.000E+00,8.458E+03,8.450E+03,
    1.072E-03,8.357E+00,5.272E-03,7.858E+03,0.000E+00,0.000E+00,7.867E+03,7.858E+03,
    1.072E-03,8.357E+00,5.272E-03,8.195E+03,0.000E+00,0.000E+00,8.204E+03,8.195E+03,
    1.500E-03,7.958E+00,8.969E-03,3.911E+03,0.000E+00,0.000E+00,3.919E+03,3.911E+03,
    2.000E-03,7.446E+00,1.342E-02,1.989E+03,0.000E+00,0.000E+00,1.997E+03,1.989E+03,
    3.000E-03,6.463E+00,2.190E-02,7.355E+02,0.000E+00,0.000E+00,7.420E+02,7.356E+02,
    4.000E-03,5.628E+00,2.932E-02,3.551E+02,0.000E+00,0.000E+00,3.608E+02,3.551E+02,
    4.557E-03,5.229E+00,3.296E-02,2.539E+02,0.000E+00,0.000E+00,2.591E+02,2.539E+02,
    4.557E-03,5.229E+00,3.296E-02,7.498E+02,0.000E+00,0.000E+00,7.550E+02,7.498E+02,
    4.702E-03,5.133E+00,3.387E-02,7.027E+02,0.000E+00,0.000E+00,7.079E+02,7.027E+02,
    4.852E-03,5.035E+00,3.479E-02,6.587E+02,0.000E+00,0.000E+00,6.637E+02,6.587E+02,
    4.852E-03,5.035E+00,3.479E-02,8.883E+02,0.000E+00,0.000E+00,8.934E+02,8.884E+02,
    5.000E-03,4.940E+00,3.568E-02,8.380E+02,0.000E+00,0.000E+00,8.430E+02,8.381E+02,
    5.188E-03,4.821E+00,3.679E-02,7.616E+02,0.000E+00,0.000E+00,7.665E+02,7.617E+02,
    5.188E-03,4.821E+00,3.679E-02,8.788E+02,0.000E+00,0.000E+00,8.837E+02,8.789E+02,
    6.000E-03,4.356E+00,4.129E-02,6.131E+02,0.000E+00,0.000E+00,6.175E+02,6.131E+02,
    8.000E-03,3.446E+00,5.106E-02,2.886E+02,0.000E+00,0.000E+00,2.921E+02,2.887E+02,
    1.000E-02,2.798E+00,5.955E-02,1.597E+02,0.000E+00,0.000E+00,1.626E+02,1.598E+02,
    1.500E-02,1.843E+00,7.578E-02,5.320E+01,0.000E+00,0.000E+00,5.511E+01,5.327E+01,
    2.000E-02,1.312E+00,8.646E-02,2.404E+01,0.000E+00,0.000E+00,2.543E+01,2.412E+01,
    3.000E-02,7.455E-01,9.908E-02,7.716E+00,0.000E+00,0.000E+00,8.561E+00,7.815E+00,
    3.317E-02,6.430E-01,1.016E-01,5.808E+00,0.000E+00,0.000E+00,6.553E+00,5.910E+00,
    3.317E-02,6.430E-01,1.016E-01,3.508E+01,0.000E+00,0.000E+00,3.583E+01,3.518E+01,
    4.000E-02,4.859E-01,1.057E-01,2.151E+01,0.000E+00,0.000E+00,2.210E+01,2.161E+01,
    5.000E-02,3.452E-01,1.093E-01,1.187E+01,0.000E+00,0.000E+00,1.232E+01,1.198E+01,
    6.000E-02,2.577E-01,1.110E-01,7.208E+00,0.000E+00,0.000E+00,7.577E+00,7.319E+00,
    8.000E-02,1.584E-01,1.115E-01,3.240E+00,0.000E+00,0.000E+00,3.510E+00,3.352E+00,
    1.000E-01,1.073E-01,1.100E-01,1.725E+00,0.000E+00,0.000E+00,1.942E+00,1.835E+00,
    1.500E-01,5.220E-02,1.036E-01,5.419E-01,0.000E+00,0.000E+00,6.978E-01,6.456E-01,
    2.000E-01,3.087E-02,9.709E-02,2.383E-01,0.000E+00,0.000E+00,3.663E-01,3.354E-01,
    3.000E-01,1.440E-02,8.627E-02,7.650E-02,0.000E+00,0.000E+00,1.772E-01,1.628E-01,
    4.000E-01,8.295E-03,7.811E-02,3.525E-02,0.000E+00,0.000E+00,1.217E-01,1.134E-01,
    5.000E-01,5.381E-03,7.175E-02,1.988E-02,0.000E+00,0.000E+00,9.701E-02,9.163E-02,
    6.000E-01,3.771E-03,6.663E-02,1.274E-02,0.000E+00,0.000E+00,8.313E-02,7.936E-02,
    8.000E-01,2.143E-03,5.875E-02,6.596E-03,0.000E+00,0.000E+00,6.749E-02,6.534E-02,
    1.000E+00,1.379E-03,5.291E-02,4.120E-03,0.000E+00,0.000E+00,5.841E-02,5.703E-02,
    1.022E+00,1.321E-03,5.234E-02,3.922E-03,0.000E+00,0.000E+00,5.759E-02,5.626E-02,
    1.250E+00,8.860E-04,4.737E-02,2.645E-03,1.883E-04,0.000E+00,5.109E-02,5.021E-02,
    1.500E+00,6.164E-04,4.309E-02,1.893E-03,8.713E-04,0.000E+00,4.647E-02,4.586E-02,
    2.000E+00,3.476E-04,3.681E-02,1.152E-03,2.939E-03,0.000E+00,4.124E-02,4.090E-02,
    2.044E+00,3.329E-04,3.635E-02,1.111E-03,3.139E-03,0.000E+00,4.094E-02,4.061E-02,
    3.000E+00,1.547E-04,2.898E-02,6.112E-04,7.408E-03,1.014E-05,3.716E-02,3.701E-02,
    4.000E+00,8.713E-05,2.418E-02,4.046E-04,1.136E-02,4.134E-05,3.607E-02,3.598E-02,
    5.000E+00,5.576E-05,2.088E-02,2.992E-04,1.476E-02,8.229E-05,3.608E-02,3.602E-02,
    6.000E+00,3.873E-05,1.846E-02,2.361E-04,1.769E-02,1.262E-04,3.655E-02,3.651E-02,
    7.000E+00,2.846E-05,1.659E-02,1.944E-04,2.030E-02,1.700E-04,3.729E-02,3.726E-02,
    8.000E+00,2.179E-05,1.510E-02,1.650E-04,2.265E-02,2.123E-04,3.815E-02,3.813E-02,
    9.000E+00,1.722E-05,1.389E-02,1.431E-04,2.478E-02,2.528E-04,3.907E-02,3.906E-02,
    1.000E+01,1.395E-05,1.286E-02,1.262E-04,2.673E-02,2.913E-04,4.002E-02,4.001E-02,
    1.100E+01,1.153E-05,1.200E-02,1.129E-04,2.852E-02,3.276E-04,4.097E-02,4.096E-02,
    1.200E+01,9.685E-06,1.125E-02,1.021E-04,3.019E-02,3.619E-04,4.192E-02,4.191E-02,
    1.300E+01,8.252E-06,1.060E-02,9.310E-05,3.174E-02,3.942E-04,4.283E-02,4.283E-02,
    1.400E+01,7.118E-06,1.003E-02,8.556E-05,3.316E-02,4.249E-04,4.371E-02,4.370E-02,
    1.500E+01,6.198E-06,9.524E-03,7.915E-05,3.448E-02,4.539E-04,4.455E-02,4.454E-02,
    1.600E+01,5.448E-06,9.068E-03,7.365E-05,3.571E-02,4.817E-04,4.534E-02,4.533E-02,
    1.800E+01,4.305E-06,8.285E-03,6.459E-05,3.794E-02,5.324E-04,4.683E-02,4.683E-02,
    2.000E+01,3.487E-06,7.640E-03,5.751E-05,3.995E-02,5.789E-04,4.823E-02,4.823E-02,
    2.200E+01,2.882E-06,7.099E-03,5.182E-05,4.177E-02,6.216E-04,4.954E-02,4.954E-02,
    2.400E+01,2.422E-06,6.634E-03,4.717E-05,4.342E-02,6.606E-04,5.076E-02,5.076E-02,
    2.600E+01,2.063E-06,6.231E-03,4.327E-05,4.493E-02,6.966E-04,5.190E-02,5.190E-02,
    2.800E+01,1.779E-06,5.875E-03,3.996E-05,4.631E-02,7.298E-04,5.295E-02,5.295E-02,
    3.000E+01,1.550E-06,5.562E-03,3.712E-05,4.760E-02,7.612E-04,5.396E-02,5.396E-02,
    4.000E+01,8.717E-07,4.421E-03,2.738E-05,5.272E-02,8.893E-04,5.806E-02,5.806E-02,
    5.000E+01,5.581E-07,3.691E-03,2.169E-05,5.657E-02,9.866E-04,6.127E-02,6.126E-02,
    6.000E+01,3.875E-07,3.180E-03,1.795E-05,5.955E-02,1.064E-03,6.382E-02,6.382E-02,
    8.000E+01,2.180E-07,2.508E-03,1.335E-05,6.392E-02,1.180E-03,6.762E-02,6.762E-02,
    1.000E+02,1.395E-07,2.082E-03,1.062E-05,6.705E-02,1.264E-03,7.041E-02,7.041E-02])
I=I.reshape((int(len(I)/8),8))

Tl=np.array([1.000E-03,1.239E+01,3.618E-03,4.994E+03,0.000E+00,0.000E+00,5.007E+03,4.994E+03,
    1.500E-03,1.190E+01,6.585E-03,2.247E+03,0.000E+00,0.000E+00,2.259E+03,2.247E+03,
    2.000E-03,1.135E+01,9.517E-03,1.220E+03,0.000E+00,0.000E+00,1.231E+03,1.220E+03,
    2.389E-03,1.089E+01,1.173E-02,8.244E+02,0.000E+00,0.000E+00,8.353E+02,8.244E+02,
    2.389E-03,1.089E+01,1.173E-02,1.121E+03,0.000E+00,0.000E+00,1.132E+03,1.121E+03,
    2.437E-03,1.084E+01,1.198E-02,1.509E+03,0.000E+00,0.000E+00,1.519E+03,1.509E+03,
    2.485E-03,1.079E+01,1.222E-02,2.029E+03,0.000E+00,0.000E+00,2.040E+03,2.029E+03,
    2.485E-03,1.079E+01,1.222E-02,2.345E+03,0.000E+00,0.000E+00,2.356E+03,2.345E+03,
    2.711E-03,1.054E+01,1.344E-02,2.137E+03,0.000E+00,0.000E+00,2.147E+03,2.137E+03,
    2.957E-03,1.024E+01,1.478E-02,1.947E+03,0.000E+00,0.000E+00,1.957E+03,1.947E+03,
    2.957E-03,1.024E+01,1.478E-02,2.255E+03,0.000E+00,0.000E+00,2.266E+03,2.255E+03,
    3.000E-03,1.019E+01,1.501E-02,2.178E+03,0.000E+00,0.000E+00,2.189E+03,2.178E+03,
    3.416E-03,9.726E+00,1.718E-02,1.581E+03,0.000E+00,0.000E+00,1.591E+03,1.581E+03,
    3.416E-03,9.726E+00,1.718E-02,1.677E+03,0.000E+00,0.000E+00,1.687E+03,1.677E+03,
    3.557E-03,9.572E+00,1.790E-02,1.523E+03,0.000E+00,0.000E+00,1.532E+03,1.523E+03,
    3.704E-03,9.414E+00,1.865E-02,1.383E+03,0.000E+00,0.000E+00,1.392E+03,1.383E+03,
    3.704E-03,9.414E+00,1.865E-02,1.443E+03,0.000E+00,0.000E+00,1.452E+03,1.443E+03,
    4.000E-03,9.102E+00,2.014E-02,1.203E+03,0.000E+00,0.000E+00,1.212E+03,1.203E+03,
    5.000E-03,8.129E+00,2.498E-02,6.986E+02,0.000E+00,0.000E+00,7.068E+02,6.986E+02,
    6.000E-03,7.287E+00,2.961E-02,4.443E+02,0.000E+00,0.000E+00,4.516E+02,4.444E+02,
    8.000E-03,5.934E+00,3.816E-02,2.148E+02,0.000E+00,0.000E+00,2.208E+02,2.149E+02,
    1.000E-02,4.921E+00,4.552E-02,1.211E+02,0.000E+00,0.000E+00,1.260E+02,1.211E+02,
    1.266E-02,3.913E+00,5.351E-02,6.559E+01,0.000E+00,0.000E+00,6.956E+01,6.564E+01,
    1.266E-02,3.913E+00,5.351E-02,1.653E+02,0.000E+00,0.000E+00,1.693E+02,1.654E+02,
    1.364E-02,3.619E+00,5.608E-02,1.351E+02,0.000E+00,0.000E+00,1.388E+02,1.352E+02,
    1.470E-02,3.332E+00,5.866E-02,1.105E+02,0.000E+00,0.000E+00,1.139E+02,1.106E+02,
    1.470E-02,3.332E+00,5.866E-02,1.538E+02,0.000E+00,0.000E+00,1.572E+02,1.538E+02,
    1.500E-02,3.256E+00,5.937E-02,1.464E+02,0.000E+00,0.000E+00,1.497E+02,1.464E+02,
    1.535E-02,3.173E+00,6.017E-02,1.383E+02,0.000E+00,0.000E+00,1.416E+02,1.384E+02,
    1.535E-02,3.173E+00,6.017E-02,1.599E+02,0.000E+00,0.000E+00,1.631E+02,1.600E+02,
    2.000E-02,2.299E+00,6.924E-02,8.123E+01,0.000E+00,0.000E+00,8.360E+01,8.130E+01,
    3.000E-02,1.355E+00,8.268E-02,2.785E+01,0.000E+00,0.000E+00,2.929E+01,2.793E+01,
    4.000E-02,9.040E-01,9.060E-02,1.286E+01,0.000E+00,0.000E+00,1.385E+01,1.295E+01,
    5.000E-02,6.426E-01,9.517E-02,7.013E+00,0.000E+00,0.000E+00,7.750E+00,7.108E+00,
    6.000E-02,4.809E-01,9.771E-02,4.261E+00,0.000E+00,0.000E+00,4.839E+00,4.358E+00,
    8.000E-02,3.023E-01,9.953E-02,1.931E+00,0.000E+00,0.000E+00,2.332E+00,2.030E+00,
    8.553E-02,2.707E-01,9.962E-02,1.605E+00,0.000E+00,0.000E+00,1.976E+00,1.705E+00,
    8.553E-02,2.707E-01,9.962E-02,7.676E+00,0.000E+00,0.000E+00,8.046E+00,7.775E+00,
    1.000E-01,2.087E-01,9.924E-02,5.089E+00,0.000E+00,0.000E+00,5.396E+00,5.188E+00,
    1.500E-01,1.028E-01,9.508E-02,1.759E+00,0.000E+00,0.000E+00,1.957E+00,1.854E+00,
    2.000E-01,6.132E-02,8.987E-02,8.182E-01,0.000E+00,0.000E+00,9.694E-01,9.081E-01,
    3.000E-01,2.924E-02,8.053E-02,2.825E-01,0.000E+00,0.000E+00,3.922E-01,3.630E-01,
    4.000E-01,1.708E-02,7.322E-02,1.364E-01,0.000E+00,0.000E+00,2.267E-01,2.096E-01,
    5.000E-01,1.118E-02,6.745E-02,7.938E-02,0.000E+00,0.000E+00,1.580E-01,1.468E-01,
    6.000E-01,7.879E-03,6.276E-02,5.195E-02,0.000E+00,0.000E+00,1.226E-01,1.147E-01,
    8.000E-01,4.514E-03,5.545E-02,2.755E-02,0.000E+00,0.000E+00,8.751E-02,8.300E-02,
    1.000E+00,2.921E-03,5.003E-02,1.735E-02,0.000E+00,0.000E+00,7.031E-02,6.739E-02,
    1.022E+00,2.799E-03,4.950E-02,1.661E-02,0.000E+00,0.000E+00,6.891E-02,6.611E-02,
    1.250E+00,1.885E-03,4.485E-02,1.121E-02,3.710E-04,0.000E+00,5.831E-02,5.642E-02,
    1.500E+00,1.316E-03,4.081E-02,7.982E-03,1.767E-03,0.000E+00,5.187E-02,5.056E-02,
    2.000E+00,7.446E-04,3.489E-02,4.829E-03,5.348E-03,0.000E+00,4.581E-02,4.506E-02,
    2.044E+00,7.131E-04,3.444E-02,4.655E-03,5.663E-03,0.000E+00,4.548E-02,4.476E-02,
    3.000E+00,3.324E-04,2.748E-02,2.525E-03,1.176E-02,9.600E-06,4.211E-02,4.177E-02,
    4.000E+00,1.873E-04,2.293E-02,1.654E-03,1.693E-02,3.913E-05,4.175E-02,4.156E-02,
    5.000E+00,1.200E-04,1.981E-02,1.212E-03,2.126E-02,7.782E-05,4.248E-02,4.236E-02,
    6.000E+00,8.336E-05,1.751E-02,9.502E-04,2.500E-02,1.193E-04,4.366E-02,4.358E-02,
    7.000E+00,6.126E-05,1.574E-02,7.782E-04,2.828E-02,1.605E-04,4.502E-02,4.496E-02,
    8.000E+00,4.691E-05,1.433E-02,6.574E-04,3.123E-02,2.003E-04,4.647E-02,4.642E-02,
    9.000E+00,3.707E-05,1.317E-02,5.684E-04,3.394E-02,2.384E-04,4.796E-02,4.792E-02,
    1.000E+01,3.002E-05,1.220E-02,5.000E-04,3.642E-02,2.744E-04,4.943E-02,4.940E-02,
    1.100E+01,2.482E-05,1.139E-02,4.458E-04,3.869E-02,3.085E-04,5.085E-02,5.083E-02,
    1.200E+01,2.086E-05,1.068E-02,4.022E-04,4.084E-02,3.406E-04,5.228E-02,5.226E-02,
    1.300E+01,1.777E-05,1.006E-02,3.662E-04,4.284E-02,3.707E-04,5.366E-02,5.364E-02,
    1.400E+01,1.532E-05,9.517E-03,3.362E-04,4.470E-02,3.992E-04,5.497E-02,5.495E-02,
    1.500E+01,1.335E-05,9.034E-03,3.103E-04,4.644E-02,4.264E-04,5.622E-02,5.621E-02,
    1.600E+01,1.173E-05,8.604E-03,2.883E-04,4.806E-02,4.520E-04,5.741E-02,5.740E-02,
    1.800E+01,9.273E-06,7.864E-03,2.524E-04,5.100E-02,4.994E-04,5.963E-02,5.962E-02,
    2.000E+01,7.511E-06,7.251E-03,2.243E-04,5.360E-02,5.424E-04,6.162E-02,6.161E-02,
    2.200E+01,6.205E-06,6.736E-03,2.018E-04,5.598E-02,5.816E-04,6.351E-02,6.350E-02,
    2.400E+01,5.215E-06,6.294E-03,1.834E-04,5.813E-02,6.176E-04,6.523E-02,6.523E-02,
    2.600E+01,4.443E-06,5.911E-03,1.681E-04,6.014E-02,6.506E-04,6.687E-02,6.687E-02,
    2.800E+01,3.833E-06,5.575E-03,1.550E-04,6.194E-02,6.812E-04,6.835E-02,6.835E-02,
    3.000E+01,3.338E-06,5.280E-03,1.439E-04,6.361E-02,7.095E-04,6.975E-02,6.975E-02,
    4.000E+01,1.878E-06,4.196E-03,1.058E-04,7.042E-02,8.262E-04,7.555E-02,7.555E-02,
    5.000E+01,1.202E-06,3.503E-03,8.365E-05,7.549E-02,9.140E-04,7.999E-02,7.999E-02,
    6.000E+01,8.344E-07,3.017E-03,6.915E-05,7.941E-02,9.829E-04,8.348E-02,8.348E-02,
    8.000E+01,4.694E-07,2.380E-03,5.136E-05,8.518E-02,1.086E-03,8.870E-02,8.870E-02,
    1.000E+02,3.005E-07,1.975E-03,4.084E-05,8.925E-02,1.160E-03,9.243E-02,9.243E-02])
Tl=Tl.reshape((int(len(Tl)/8),8))

NaI_photopeak_rations_labels=["Energy [MeV]", "10x10", "8x8", "8x4", "5x5", "3x3", "2x2", "1x1", "[in. diameter, in. length]"]
NaI_photopeak_relations_geoms=np.array([[10,10],
                               [8,8],
                               [8,4],
                               [5,5],
                               [3,3],
                               [2,2],
                               [1,1]])*2.54
NaI_photopeak_ratios=np.array([[0.25,0.50,1.00,2.00,3.00,4.00,5.00,7.50,10.0],
                               [0.96,0.88,0.79,0.70,0.62,0.58,0.54,0.48,0.43],
                               [0.95,0.87,0.75,0.62,0.55,0.50,0.47,0.39,0.34],
                               [0.95,0.84,0.66,0.51,0.43,0.37,0.34,0.26,0.21],
                               [0.94,0.80,0.62,0.46,0.39,0.33,0.29,0.21,0.18],
                               [0.93,0.69,0.46,0.31,0.23,0.18,0.15,0.09,0.07],
                               [0.92,0.59,0.35,0.21,0.15,0.11,0.08,0.05,0.03],
                               [0.81,0.44,0.21,0.11,0.07,0.05,0.03,0.02,0.01]])

@njit
def photopeak_func1(E,a,b): #MeV
    return 1-a*np.exp(-b/E)

def photopeak_minimize1(p,E,r):
    return np.sum( ( photopeak_func1(E,p[0],p[1]) - r )**2 )
    
def photopeak_func2(E,a,b,c):
    return np.minimum( a*np.exp(-b*E) +c , 1 )

def photopeak_minimize2(p,E,r):
    return np.sum( ( photopeak_func2(E,p[0],p[1],p[2]) - r )**2 )

def fit_photopeak_func1(data=NaI_photopeak_ratios,ret=False):
    param=[]
    E=np.linspace(0.25,10,80)
    for geom in range(1,len(NaI_photopeak_ratios)):
        res=minimize(photopeak_minimize1,[1,1],(data[0,:],data[geom,:]))
        #plt.plot(data[0,:],data[geom,:],".",c="C"+str(geom-1))
        #plt.plot(E,photopeak_func1(E, res.x[0], res.x[1]),c="C"+str(geom-1),label=str(int(NaI_photopeak_relations_geoms[geom-1,0]*10)/10)+"x"+str(int(NaI_photopeak_relations_geoms[geom-1,1]*10)/10))
        param.append(res.x)
    #plt.legend()
    #plt.xlabel("Energy [MeV]")
    #plt.ylabel("Photopeak/Total Ratio")
    if ret:
        return np.array(param)
    #plt.savefig(p_plots+'NaI_photopeak_1.pdf',bbox_inches='tight')

NaI_func1_param=fit_photopeak_func1(ret=True)

def fit_photopeak_func2(data=NaI_photopeak_ratios):
    param=[]
    E=np.linspace(0.25,10,80)
    for geom in range(1,len(NaI_photopeak_ratios)):
        res=minimize(photopeak_minimize2,[1,1,0],(data[0,:],data[geom,:]))
        plt.plot(data[0,:],data[geom,:],".",c="C"+str(geom-1))
        plt.plot(E,photopeak_func2(E, res.x[0], res.x[1], res.x[2]),c="C"+str(geom-1),label=str(int(NaI_photopeak_relations_geoms[geom-1,0]*10)/10)+"x"+str(int(NaI_photopeak_relations_geoms[geom-1,1]*10)/10))
        param.append(res.x)
    plt.legend()
    plt.xlabel("Energy [MeV]")
    plt.ylabel("Photopeak/Total Ratio")
    plt.savefig(p_plots+'NaI_photopeak_2.pdf',bbox_inches='tight')
    #return np.array(param)

@njit
def fit_photopeak_param1_1_func1(D,H,a,b,c,d):
    return a*D**b*H**c+d

def minimize_photopeak_param1_1(p,D,H,act_param):
    return np.sum( ( fit_photopeak_param1_1_func1(D,H,p[0],p[1],p[2],p[3]) - act_param)**2 )
    

def fit_photopeak_param1(param=NaI_func1_param,ret=False):
    D,H,act_param1,act_param2=NaI_photopeak_relations_geoms[:,0], NaI_photopeak_relations_geoms[:,1], NaI_func1_param[:,0], NaI_func1_param[:,1]
    a=minimize( minimize_photopeak_param1_1, [1,1,1,0], (D,H,act_param1))
    
    b=minimize( minimize_photopeak_param1_1, [1,1,1,0], (D,H,act_param2))
    
    if ret:
        return a.x,b.x
    plt.plot(D**2*H,act_param1,".")
    plt.plot(D**2*H,fit_photopeak_param1_1_func1(D, H, a.x[0], a.x[1], a.x[2], a.x[3]))
    plt.plot(D**2*H,act_param2,".")
    plt.plot(D**2*H,fit_photopeak_param1_1_func1(D, H, b.x[0], b.x[1], b.x[2], b.x[3]))
    plt.savefig(p_plots+'NaI_photopeak_param_fits.pdf',bbox_inches='tight')

NaI_a,NaI_b=fit_photopeak_param1(ret=True)

#MeV
@njit
def D2_cell_photopeak_ratio(E):
    D,H=28.2,7.5
    a=fit_photopeak_param1_1_func1(D,H,NaI_a[0],NaI_a[1],NaI_a[2],NaI_a[3])
    b=fit_photopeak_param1_1_func1(D,H,NaI_b[0],NaI_b[1],NaI_b[2],NaI_b[3])
    return photopeak_func1(E, a, b)

@njit
def GBM_cell_photopeak_ratio(E):
    D,H=12.7,1.27
    a=fit_photopeak_param1_1_func1(D,H,NaI_a[0],NaI_a[1],NaI_a[2],NaI_a[3])
    b=fit_photopeak_param1_1_func1(D,H,NaI_b[0],NaI_b[1],NaI_b[2],NaI_b[3])
    return photopeak_func1(E, a, b)

def plot_photopeak_fitted_fits(data=NaI_photopeak_ratios):
    E=np.linspace(0.25,10,80)
    for geom in range(1,len(NaI_photopeak_ratios)):
        #plt.plot(data[0,:],data[geom,:],".",c="C"+str(geom-1))
        plt.plot(E,photopeak_func1(E, NaI_func1_param[geom-1,0], NaI_func1_param[geom-1,1]),c="C"+str(geom-1))
        D,H=NaI_photopeak_relations_geoms[geom-1,0],NaI_photopeak_relations_geoms[geom-1,1]
        a=fit_photopeak_param1_1_func1(D,H,NaI_a[0],NaI_a[1],NaI_a[2],NaI_a[3])
        b=fit_photopeak_param1_1_func1(D,H,NaI_b[0],NaI_b[1],NaI_b[2],NaI_b[3])
        plt.plot(E,photopeak_func1(E, a, b),"--",c="C"+str(geom-1),label=str(int(D*10)/10)+"x"+str(int(H*10)/10))
    plt.plot(E,D2_cell_photopeak_ratio(E),"--",c="C7",label="28.2x7.5")
    plt.legend()
    plt.xlabel("Energy [MeV]")
    plt.ylabel("Photopeak/Total Ratio")
    #plt.savefig(p_plots+'NaI_photopeak_all.pdf',bbox_inches='tight')

@njit
def continue_log(value,x_data,y_data):
    if value<x_data[0] or value>=x_data[-1]:
        return 0
    for i in range(len(x_data)-1):
        if value>=x_data[i] and value<x_data[i+1]:
            if y_data[i]==0. or y_data[i+1]==0.:
                return 0.
            s=np.log(y_data[i+1]/y_data[i])/np.log(x_data[i+1]/x_data[i])
            f=y_data[i]/(x_data[i]**s)
            return f*value**s

@njit
def continue_log_x(value,x_data,y_data):
    if value<x_data[0] or value>=x_data[-1]:
        return 0
    for i in range(len(x_data)-1):
        if value>=x_data[i] and value<x_data[i+1]:
            if y_data[i+1]-y_data[i]==0.:
                return y_data[i]
            else:
                A= (y_data[i+1]-y_data[i]) / np.log(x_data[i+1]/x_data[i])
                B = ( np.exp(y_data[i]/A) ) / x_data[i] 
                return A*np.log(B*value)

@njit
def continue_lin(value,x_data,y_data):
    if value<x_data[0] or value>=x_data[-1]:
        return 0
    for i in range(len(x_data)-1):
        if value>=x_data[i] and value<x_data[i+1]:
            return ( y_data[i+1] - y_data[i] ) / ( x_data[i+1] - x_data[i] ) * ( value - x_data[i] ) + y_data[i]

@vectorize
def NaI_total_cs(E):
    return NaI_photoel_cs(E) + NaI_incoh_cs(E) + NaI_pair_cs(E)

@vectorize
def NaI_total_cs2(E):
    return (22.989769*continue_log(E,Na[:,0],Na[0:,7])+126.90447*continue_log(E,I[:,0],I[0:,7]))/(22.989769+126.90447)

@vectorize
def NaI_total_cs3(E):
    return NaI_photoel_cs(E) + NaI_incoh_cs(E)

@vectorize
def NaI_photoel_cs(E):
    return (22.989769*continue_log(E,Na[:,0],Na[0:,3])+126.90447*continue_log(E,I[:,0],I[0:,3]))/(22.989769+126.90447)

@vectorize
def NaI_incoh_cs(E):
    return (22.989769*continue_log(E,Na[:,0],Na[0:,2])+126.90447*continue_log(E,I[:,0],I[0:,2]))/(22.989769+126.90447)

@vectorize
def NaI_pair_cs(E):
    return (22.989769*continue_log(E,Na[:,0],Na[0:,4])+126.90447*continue_log(E,I[:,0],I[0:,4]))/(22.989769+126.90447) + (22.989769*continue_log(E,Na[:,0],Na[0:,5])+126.90447*continue_log(E,I[:,0],I[0:,5]))/(22.989769+126.90447)

def plot_cs():
    Es=np.geomspace(1E-3,0.999E2,1000)
    plt.plot(Es,NaI_total_cs(Es),label="Total")
    plt.plot(Es,NaI_photoel_cs(Es),label="Photoelectric")
    plt.plot(Es,NaI_incoh_cs(Es),label="Incoherent")
    plt.plot(Es,NaI_pair_cs(Es),label="Pair Creation")
    plt.xscale("log")
    plt.yscale("log")
    plt.ylabel("Cross Section [cm$^2$/g]")
    plt.xlabel("Energy [MeV]")
    plt.legend()
    #plt.savefig(p_plots+'Cross_Section_NaI_pp.pdf',bbox_inches='tight')
    

@njit
def klein_nishina_diff_energy_cs(E1,E2):
    theta=np.arccos( 1-0.511*( (E1-E2) / (E1*E2) ) )
    if np.isnan(theta):
        return 0.
    P=E2/E1
    return P**2 * (P+1/P-np.sin(theta)**2) * (1/E2**2)

  
def calc_total_kn_cs():
    E1s=np.geomspace(0.001,100,1000)
    outs=np.zeros(len(E1s))
    for i in range(len(E1s)):
        Ec=E1s[i]*((1/( 1+(2*E1s[i]/0.511)) ) )*1.00001
        E2s=np.geomspace(Ec,E1s[i],1000)
        cs=np.zeros(len(E2s))
        for j in range(len(E2s)):
            cs[j]=klein_nishina_diff_energy_cs(E1s[i], E2s[j])
        outs[i]=exp_int_solver(E2s,cs)
    plt.plot(E1s,outs)
    plt.xscale("log")
    plt.yscale("log")
    return outs

Es_kn=np.geomspace(0.001,100,1000)
kn_cs_e=np.array([5.17833583, 5.17832949, 5.17831786, 5.17830094, 5.17827873,
       5.17825123, 5.17821844, 5.17818034, 5.17813694, 5.17808823,
       5.1780342 , 5.17797486, 5.17791018, 5.17784018, 5.17776482,
       5.17768411, 5.17759804, 5.1775066 , 5.17740977, 5.17730754,
       5.17719991, 5.17708685, 5.17696836, 5.17684442, 5.17671501,
       5.17658012, 5.17643973, 5.17629383, 5.1761424 , 5.17598541,
       5.17582285, 5.1756547 , 5.17548094, 5.17530155, 5.1751165 ,
       5.17492577, 5.17472934, 5.17452719, 5.17431928, 5.1741056 ,
       5.17388612, 5.1736608 , 5.17342963, 5.17319258, 5.17294961,
       5.17270069, 5.1724458 , 5.1721849 , 5.17191796, 5.17164495,
       5.17136584, 5.17108059, 5.17078916, 5.17049152, 5.17018763,
       5.16987746, 5.16956096, 5.16923811, 5.16890885, 5.16857315,
       5.16823097, 5.16788226, 5.16752699, 5.1671651 , 5.16679656,
       5.16642132, 5.16603933, 5.16565055, 5.16525493, 5.16485242,
       5.16444297, 5.16402654, 5.16360306, 5.1631725 , 5.16273479,
       5.16228989, 5.16183773, 5.16137828, 5.16091146, 5.16043722,
       5.15995551, 5.15946627, 5.15896943, 5.15846494, 5.15795273,
       5.15743276, 5.15690494, 5.15636922, 5.15582553, 5.15527381,
       5.154714  , 5.15414601, 5.1535698 , 5.15298528, 5.15239239,
       5.15179105, 5.15118119, 5.15056275, 5.14993565, 5.1492998 ,
       5.14865514, 5.1480016 , 5.14733908, 5.14666752, 5.14598682,
       5.14529693, 5.14459774, 5.14388918, 5.14317117, 5.14244361,
       5.14170643, 5.14095953, 5.14020284, 5.13943625, 5.13865968,
       5.13787305, 5.13707625, 5.13626919, 5.13545178, 5.13462393,
       5.13378553, 5.1329365 , 5.13207672, 5.13120611, 5.13032456,
       5.12943197, 5.12852823, 5.12761325, 5.12668691, 5.12574911,
       5.12479974, 5.1238387 , 5.12286587, 5.12188114, 5.1208844 ,
       5.11987554, 5.11885444, 5.11782099, 5.11677506, 5.11571654,
       5.11464532, 5.11356126, 5.11246426, 5.11135417, 5.11023089,
       5.10909428, 5.10794422, 5.10678058, 5.10560323, 5.10441204,
       5.10320687, 5.1019876 , 5.10075409, 5.0995062 , 5.0982438 ,
       5.09696675, 5.0956749 , 5.09436812, 5.09304627, 5.0917092 ,
       5.09035676, 5.08898882, 5.08760521, 5.0862058 , 5.08479043,
       5.08335895, 5.08191121, 5.08044706, 5.07896633, 5.07746887,
       5.07595452, 5.07442313, 5.07287453, 5.07130856, 5.06972505,
       5.06812384, 5.06650476, 5.06486765, 5.06321233, 5.06153864,
       5.0598464 , 5.05813544, 5.05640558, 5.05465665, 5.05288846,
       5.05110085, 5.04929363, 5.04746662, 5.04561962, 5.04375247,
       5.04186498, 5.03995694, 5.03802819, 5.03607852, 5.03410775,
       5.03211568, 5.03010212, 5.02806687, 5.02600973, 5.02393052,
       5.02182901, 5.01970503, 5.01755836, 5.01538879, 5.01319613,
       5.01098017, 5.0087407 , 5.00647751, 5.00419039, 5.00187912,
       4.99954351, 4.99718332, 4.99479835, 4.99238838, 4.98995319,
       4.98749255, 4.98500626, 4.98249409, 4.97995582, 4.97739121,
       4.97480005, 4.97218212, 4.96953717, 4.96686499, 4.96416534,
       4.96143799, 4.95868271, 4.95589927, 4.95308744, 4.95024697,
       4.94737763, 4.94447919, 4.9415514 , 4.93859403, 4.93560684,
       4.93258958, 4.92954201, 4.9264639 , 4.923355  , 4.92021506,
       4.91704383, 4.91384109, 4.91060656, 4.90734002, 4.9040412 ,
       4.90070987, 4.89734578, 4.89394867, 4.89051829, 4.88705439,
       4.88355673, 4.88002504, 4.87645909, 4.87285861, 4.86922335,
       4.86555307, 4.8618475 , 4.8581064 , 4.85432951, 4.85051657,
       4.84666734, 4.84278156, 4.83885897, 4.83489933, 4.83090238,
       4.82686786, 4.82279553, 4.81868513, 4.81453641, 4.81034911,
       4.80612299, 4.80185779, 4.79755326, 4.79320916, 4.78882523,
       4.78440122, 4.77993689, 4.77543199, 4.77088628, 4.7662995 ,
       4.76167142, 4.75700179, 4.75229037, 4.74753692, 4.7427412 ,
       4.73790297, 4.73302199, 4.72809804, 4.72313086, 4.71812025,
       4.71306595, 4.70796775, 4.70282542, 4.69763874, 4.69240747,
       4.6871314 , 4.68181032, 4.676444  , 4.67103223, 4.6655748 ,
       4.6600715 , 4.65452213, 4.64892648, 4.64328434, 4.63759553,
       4.63185984, 4.62607708, 4.62024707, 4.61436961, 4.60844453,
       4.60247164, 4.59645077, 4.59038175, 4.5842644 , 4.57809856,
       4.57188407, 4.56562077, 4.5593085 , 4.55294713, 4.54653649,
       4.54007646, 4.53356689, 4.52700764, 4.5203986 , 4.51373964,
       4.50703063, 4.50027147, 4.49346205, 4.48660225, 4.47969199,
       4.47273116, 4.46571968, 4.45865746, 4.45154443, 4.44438052,
       4.43716564, 4.42989976, 4.4225828 , 4.41521472, 4.40779548,
       4.40032503, 4.39280335, 4.3852304 , 4.37760618, 4.36993066,
       4.36220385, 4.35442573, 4.34659633, 4.33871564, 4.33078369,
       4.32280051, 4.31476612, 4.30668058, 4.29854393, 4.29035622,
       4.28211752, 4.27382789, 4.26548741, 4.25709616, 4.24865424,
       4.24016174, 4.23161878, 4.22302545, 4.21438189, 4.20568822,
       4.19694459, 4.18815112, 4.17930799, 4.17041534, 4.16147334,
       4.15248217, 4.14344201, 4.13435306, 4.12521551, 4.11602957,
       4.10679546, 4.09751339, 4.0881836 , 4.07880634, 4.06938184,
       4.05991035, 4.05039216, 4.04082752, 4.03121671, 4.02156002,
       4.01185775, 4.0021102 , 3.99231768, 3.9824805 , 3.972599  ,
       3.96267351, 3.95270437, 3.94269193, 3.93263654, 3.92253858,
       3.91239841, 3.90221641, 3.89199297, 3.88172849, 3.87142337,
       3.86107801, 3.85069283, 3.84026826, 3.82980472, 3.81930265,
       3.8087625 , 3.79818471, 3.78756974, 3.77691806, 3.76623013,
       3.75550643, 3.74474744, 3.73395365, 3.72312556, 3.71226365,
       3.70136844, 3.69044043, 3.67948015, 3.66848811, 3.65746484,
       3.64641086, 3.63532672, 3.62421295, 3.61307011, 3.60189872,
       3.59069936, 3.57947257, 3.56821892, 3.55693896, 3.54563328,
       3.53430243, 3.52294699, 3.51156754, 3.50016466, 3.48873892,
       3.47729092, 3.46582124, 3.45433046, 3.44281919, 3.431288  ,
       3.41973749, 3.40816826, 3.39658091, 3.38497602, 3.3733542 ,
       3.36171604, 3.35006215, 3.33839311, 3.32670953, 3.31501201,
       3.30330114, 3.29157752, 3.27984175, 3.26809441, 3.25633611,
       3.24456744, 3.23278898, 3.22100134, 3.20920508, 3.19740081,
       3.1855891 , 3.17377053, 3.16194568, 3.15011513, 3.13827944,
       3.1264392 , 3.11459496, 3.10274729, 3.09089674, 3.07904388,
       3.06718925, 3.05533341, 3.04347689, 3.03162023, 3.01976398,
       3.00790866, 2.99605479, 2.98420291, 2.97235352, 2.96050713,
       2.94866427, 2.93682541, 2.92499107, 2.91316173, 2.90133788,
       2.88952   , 2.87770855, 2.86590402, 2.85410686, 2.84231753,
       2.83053648, 2.81876415, 2.80700099, 2.79524742, 2.78350388,
       2.77177078, 2.76004855, 2.74833758, 2.73663827, 2.72495104,
       2.71327625, 2.7016143 , 2.68996557, 2.67833042, 2.66670922,
       2.65510232, 2.64351008, 2.63193284, 2.62037094, 2.60882471,
       2.59729449, 2.58578058, 2.5742833 , 2.56280296, 2.55133987,
       2.53989431, 2.52846658, 2.51705696, 2.50566572, 2.49429314,
       2.48293948, 2.47160501, 2.46028997, 2.44899462, 2.4377192 ,
       2.42646394, 2.41522908, 2.40401484, 2.39282145, 2.38164911,
       2.37049805, 2.35936847, 2.34826056, 2.33717452, 2.32611055,
       2.31506883, 2.30404954, 2.29305286, 2.28207896, 2.27112801,
       2.26020018, 2.24929562, 2.23841449, 2.22755694, 2.21672312,
       2.20591318, 2.19512725, 2.18436547, 2.17362798, 2.1629149 ,
       2.15222637, 2.1415625 , 2.13092342, 2.12030924, 2.10972008,
       2.09915605, 2.08861727, 2.07810382, 2.06761583, 2.05715339,
       2.0467166 , 2.03630556, 2.02592036, 2.01556109, 2.00522785,
       1.99492072, 1.98463979, 1.97438515, 1.96415687, 1.95395505,
       1.94377975, 1.93363107, 1.92350907, 1.91341383, 1.90334542,
       1.89330393, 1.88328942, 1.87330196, 1.86334162, 1.85340848,
       1.8435026 , 1.83362404, 1.82377288, 1.81394918, 1.80415301,
       1.79438442, 1.78464349, 1.77493028, 1.76524485, 1.75558726,
       1.74595758, 1.73635586, 1.72678217, 1.71723657, 1.70771912,
       1.69822988, 1.6887689 , 1.67933626, 1.66993201, 1.6605562 ,
       1.6512089 , 1.64189017, 1.63260006, 1.62333864, 1.61410596,
       1.60490208, 1.59572706, 1.58658096, 1.57746384, 1.56837575,
       1.55931675, 1.5502869 , 1.54128626, 1.53231489, 1.52337284,
       1.51446017, 1.50557695, 1.49672322, 1.48789904, 1.47910447,
       1.47033957, 1.4616044 , 1.45289901, 1.44422346, 1.4355778 ,
       1.4269621 , 1.4183764 , 1.40982076, 1.40129525, 1.3927999 ,
       1.38433479, 1.37589996, 1.36749546, 1.35912136, 1.35077771,
       1.34246455, 1.33418194, 1.32592994, 1.31770859, 1.30951796,
       1.30135808, 1.293229  , 1.28513079, 1.27706349, 1.26902714,
       1.2610218 , 1.25304751, 1.24510432, 1.23719227, 1.22931142,
       1.2214618 , 1.21364346, 1.20585644, 1.19810079, 1.19037655,
       1.18268375, 1.17502244, 1.16739265, 1.15979443, 1.15222781,
       1.14469283, 1.13718952, 1.12971791, 1.12227805, 1.11486995,
       1.10749366, 1.1001492 , 1.09283659, 1.08555588, 1.07830708,
       1.07109022, 1.06390532, 1.05675241, 1.0496315 , 1.04254262,
       1.03548579, 1.02846103, 1.02146834, 1.01450776, 1.00757928,
       1.00068292, 0.9938187 , 0.98698662, 0.9801867 , 0.97341893,
       0.96668333, 0.9599799 , 0.95330864, 0.94666956, 0.94006264,
       0.9334879 , 0.92694533, 0.92043493, 0.91395668, 0.90751059,
       0.90109664, 0.89471482, 0.88836513, 0.88204754, 0.87576205,
       0.86950863, 0.86328728, 0.85709796, 0.85094067, 0.84481538,
       0.83872206, 0.83266069, 0.82663125, 0.8206337 , 0.81466801,
       0.80873416, 0.80283212, 0.79696184, 0.79112329, 0.78531645,
       0.77954126, 0.77379769, 0.76808569, 0.76240523, 0.75675626,
       0.75113873, 0.74555261, 0.73999783, 0.73447435, 0.72898212,
       0.72352108, 0.71809119, 0.71269238, 0.7073246 , 0.70198779,
       0.6966819 , 0.69140686, 0.6861626 , 0.68094907, 0.6757662 ,
       0.67061393, 0.66549219, 0.6604009 , 0.65534001, 0.65030943,
       0.6453091 , 0.64033894, 0.63539889, 0.63048885, 0.62560876,
       0.62075854, 0.61593811, 0.61114738, 0.60638628, 0.60165473,
       0.59695264, 0.59227992, 0.58763649, 0.58302227, 0.57843716,
       0.57388108, 0.56935394, 0.56485564, 0.5603861 , 0.55594522,
       0.55153291, 0.54714908, 0.54279362, 0.53846644, 0.53416745,
       0.52989655, 0.52565364, 0.52143862, 0.51725139, 0.51309184,
       0.50895988, 0.50485541, 0.50077832, 0.4967285 , 0.49270586,
       0.48871028, 0.48474166, 0.4807999 , 0.47688488, 0.47299651,
       0.46913466, 0.46529923, 0.46149012, 0.45770721, 0.45395039,
       0.45021955, 0.44651457, 0.44283536, 0.43918178, 0.43555374,
       0.43195111, 0.42837379, 0.42482165, 0.42129459, 0.41779249,
       0.41431523, 0.41086269, 0.40743477, 0.40403135, 0.4006523 ,
       0.39729751, 0.39396687, 0.39066025, 0.38737754, 0.38411862,
       0.38088338, 0.37767168, 0.37448343, 0.37131849, 0.36817674,
       0.36505808, 0.36196238, 0.35888951, 0.35583937, 0.35281182,
       0.34980676, 0.34682406, 0.3438636 , 0.34092527, 0.33800893,
       0.33511448, 0.33224179, 0.32939075, 0.32656122, 0.3237531 ,
       0.32096627, 0.3182006 , 0.31545597, 0.31273226, 0.31002936,
       0.30734715, 0.3046855 , 0.3020443 , 0.29942342, 0.29682276,
       0.29424218, 0.29168158, 0.28914083, 0.28661981, 0.28411841,
       0.2816365 , 0.27917398, 0.27673072, 0.2743066 , 0.27190151,
       0.26951534, 0.26714795, 0.26479925, 0.2624691 , 0.2601574 ,
       0.25786403, 0.25558887, 0.25333182, 0.25109274, 0.24887154,
       0.24666809, 0.24448228, 0.242314  , 0.24016313, 0.23802956,
       0.23591318, 0.23381387, 0.23173153, 0.22966604, 0.2276173 ,
       0.22558518, 0.22356957, 0.22157038, 0.21958749, 0.21762078,
       0.21567015, 0.2137355 , 0.2118167 , 0.20991366, 0.20802627,
       0.20615442, 0.204298  , 0.20245691, 0.20063103, 0.19882028,
       0.19702453, 0.19524369, 0.19347764, 0.1917263 , 0.18998955,
       0.18826729, 0.18655941, 0.18486583, 0.18318643, 0.18152111,
       0.17986977, 0.17823232, 0.17660865, 0.17499866, 0.17340225,
       0.17181933, 0.1702498 , 0.16869356, 0.16715052, 0.16562057,
       0.16410362, 0.16259957, 0.16110834, 0.15962982, 0.15816392,
       0.15671055, 0.15526961, 0.15384101, 0.15242467, 0.15102048,
       0.14962835, 0.1482482 , 0.14687994, 0.14552347, 0.14417871,
       0.14284556, 0.14152395, 0.14021377, 0.13891495, 0.13762739,
       0.13635101, 0.13508573, 0.13383145, 0.1325881 , 0.13135559,
       0.13013383, 0.12892275, 0.12772225, 0.12653226, 0.12535269,
       0.12418347, 0.12302451, 0.12187572, 0.12073704, 0.11960839,
       0.11848967, 0.11738082, 0.11628175, 0.11519239, 0.11411266,
       0.11304249, 0.11198179, 0.11093049, 0.10988853, 0.10885581,
       0.10783227, 0.10681784, 0.10581244, 0.10481599, 0.10382843,
       0.10284969, 0.10187969, 0.10091835, 0.09996562, 0.09902142,
       0.09808568, 0.09715833, 0.09623931, 0.09532854, 0.09442596,
       0.09353149, 0.09264509, 0.09176666, 0.09089616, 0.09003352,
       0.08917866, 0.08833153, 0.08749207, 0.0866602 , 0.08583587,
       0.085019  , 0.08420955, 0.08340745, 0.08261263, 0.08182504,
       0.08104461, 0.08027129, 0.07950502, 0.07874572, 0.07799336,
       0.07724786, 0.07650918, 0.07577724, 0.07505201, 0.07433341,
       0.07362139, 0.0729159 , 0.07221688, 0.07152427, 0.07083803,
       0.07015809, 0.06948441, 0.06881692, 0.06815558, 0.06750034,
       0.06685113, 0.06620792, 0.06557064, 0.06493924, 0.06431369])

@njit
def NaI_compton_cs_E1s(E1, E2, incoh, out):
    for i in range(len(E1)):
        out[i] = klein_nishina_diff_energy_cs(E1[i], E2) / continue_log(E1[i], Es_kn, kn_cs_e) * incoh[i]
    return out
        
@njit
def NaI_compton_cs_E2s(E1, E2, incoh, out):
    for i in range(len(E2)):
        out[i] = klein_nishina_diff_energy_cs(E1, E2[i]) / continue_log(E1, Es_kn, kn_cs_e) * incoh
    return out

@vectorize
def D2_E_sig(E):
    return 1/100 * (9.86*E + 4.143*E**2)**(1/2)

@njit
def gauss_sig(E1,E2):
    return (2*np.pi)**(-1/2) * D2_E_sig(E2)**(-1) * np.exp( -(E1-E2)**2 / (2*D2_E_sig(E2)**2) )

@njit
def exp_int_solver(domain_values,range_values):
    r= (domain_values[-1] / domain_values[0]) ** (1/(len(domain_values)-1))
    weights=np.zeros(len(domain_values))
    f=(r-1)/2
    weights[:-1]=f*domain_values[:-1]
    weights[1:]+=f*domain_values[:-1]
    return np.sum(weights*range_values)

@njit
def lin_int_solver(domain_values,range_values):
    h= (domain_values[-1] - domain_values[0]) / (len(domain_values)-1)
    weights=np.ones(len(domain_values)) * h
    weights[0]/=2
    weights[-1]/=2
    return np.sum(weights*range_values)

@njit
def geomspace(start, stop, num):
    return np.array([ start * (stop/start) ** ( i/ (num-1) ) for i in range(num) ])

def fit_func(a,y1,y2):
    return np.sum((y1-a*y2)**2)

@njit
def discrete_delta(domain,value):
    weights=np.zeros(len(domain))
    if value<domain[0] or value>=domain[-1]:
        return weights
    for i in range(len(domain)-1):
        if value>=domain[i] and value<domain[i+1]:
            weights[i] = 1 - (value - domain[i]) / (domain[i+1] - domain[i])
            weights[i+1] = (value - domain[i]) / (domain[i+1] - domain[i])
            return weights / ( (domain[-1] - domain[0]) / (len(domain) - 1) )


@njit
def test(E_res_sample=np.array([1500],dtype=np.int64),
         E_sample=np.array([0.1]),
         n_sample=np.array([10]),
         T_sample=geomspace(1.,1.0e3,10)):
    
    res=np.zeros((2,len(E_res_sample),len(E_sample),len(n_sample),len(T_sample)))

    for i,E_res in enumerate(E_res_sample):
        
        for j,E in enumerate(E_sample):
            Es = np.linspace(0.001, E, E_res)
            P_T = D2_cell_photopeak_ratio(E)
            incoh = NaI_incoh_cs(Es)
            photoel = NaI_photoel_cs(Es)
            pair = NaI_pair_cs(Es)
            total = NaI_total_cs(Es)
            compton_E1s = np.zeros(E_res)
            compton_E2s = NaI_compton_cs_E2s( E , Es , incoh[-1] , np.zeros(E_res) )
            
            Es_d = np.linspace(0.001, 0.52, E_res)
            pp_delta = discrete_delta(Es_d, 0.511)
            incoh_d = NaI_incoh_cs(Es_d)
            photoel_d = NaI_photoel_cs(Es_d)
            total_d = NaI_total_cs(Es_d)
            compton_E1s_d = np.zeros(E_res)
            
            for k,n in enumerate(n_sample):
                S = np.zeros((2,n,E_res))
                Q = np.zeros((2,n))
                C = np.zeros((2,n))
                S_d = np.zeros((2,n,E_res))
                Q_d = np.zeros((2,n))
                
                Q[0,0] = photoel[-1] / total[-1]
                S[0,0,:] = compton_E2s / total[-1]
                C[0,0] = pair[-1] / total[-1]
                S_d[0,0,:] = pp_delta
                
                for l,T in enumerate(T_sample):
                    print(E_res, E, n, T)
                    
                    for loop in range(1,n):
                        exp=np.exp(-total*T)
                        exp_d=np.exp(-total_d*T)
                        
                        Q[0,loop]=lin_int_solver(Es,
                                                 S[0,loop-1,:] * (1-exp) * photoel / total )
                        Q[1,loop]=(lin_int_solver(Es,
                                                  S[0,loop-1,:] * (exp) * photoel )
                                   +lin_int_solver(Es,
                                                   S[1,loop-1,:] * (1-exp) * photoel / total))
                        
                        Q_d[0,loop]=lin_int_solver(Es_d,
                                                 S_d[0,loop-1,:] * (1-exp_d) * photoel_d / total_d )
                        Q_d[1,loop]=(lin_int_solver(Es_d,
                                                  S_d[0,loop-1,:] * (exp_d) * photoel_d )
                                   +lin_int_solver(Es_d,
                                                   S_d[1,loop-1,:] * (1-exp_d) * photoel_d / total_d))
                        
                        C[0,loop] = lin_int_solver(Es, 
                                                   S[0,loop-1,:] * (1-exp) * pair / total)
                        C[1,loop] = ( lin_int_solver(Es, 
                                                     S[0,loop-1,:] * (exp) * pair )
                                     + lin_int_solver(Es,
                                                      S[1,loop-1,:] * (1-exp) * pair / total) )
                    
                        for loop2 in range(E_res):
                            compton_E1s=NaI_compton_cs_E1s( Es, Es[loop2], incoh, compton_E1s)
                            compton_E1s_d=NaI_compton_cs_E1s( Es_d, Es_d[loop2], incoh_d, compton_E1s_d)
                            
                            S[0,loop,loop2]=lin_int_solver(Es,
                                                       S[0,loop-1,:] * (1-exp) * compton_E1s / total)
                            S[1,loop,loop2]=(lin_int_solver(Es,
                                                        S[0,loop-1,:] * exp * compton_E1s ) 
                                          +lin_int_solver(Es,
                                                          S[1,loop-1,:] * (1-exp) * compton_E1s / total))
                            
                            S_d[0,loop,loop2]=lin_int_solver(Es_d,
                                                       S_d[0,loop-1,:] * (1-exp_d) * compton_E1s_d / total_d)
                            S_d[1,loop,loop2]=(lin_int_solver(Es_d,
                                                        S_d[0,loop-1,:] * exp_d * compton_E1s_d ) 
                                          +lin_int_solver(Es_d,
                                                          S_d[1,loop-1,:] * (1-exp_d) * compton_E1s_d / total_d))
                       
                    if not np.sum( Q[1,:] )==0:
                        dT = ( P_T - np.sum(Q[0,:]) - np.sum(C[0,:]) * (np.sum(Q_d[0,:]))**2 ) / ( np.sum(Q[1,:]) + np.sum(C[1,:]) * (np.sum(Q_d[0,:]))**2 + 2 * np.sum(C[0,:]) * np.sum(Q_d[0,:]) * np.sum(Q_d[1,:]) )
                    else:
                        print("Uh-oh!")
                        dT=0
                    res[0,i,j,k,l]=P_T - np.sum(Q[0,:]) - np.sum(C[0,:]) * (np.sum(Q_d[0,:]))**2
                    res[1,i,j,k,l]=dT
    return res

def test_plotter():
    E_res_sample = np.array([250,750,1500,3000],dtype=np.int64)
    E_sample = np.array([1.5])
    n_sample = np.array([10])
    T_sample = np.geomspace(1.,1.0e3,10)

    res=test(E_res_sample,
             E_sample,
             n_sample,
             T_sample)

    for i in range(len(n_sample)):
        for j in range(len(E_res_sample)):
            for k in range(len(E_sample)):
                plt.plot(T_sample,res[0,j,k,i,:],label="E:{E}MeV R:{R} n:{n}".format(E=E_sample[k],R=E_res_sample[j],n=n_sample[i]))

    
    plt.legend()
    plt.xscale("log")
    plt.xlabel("T-value")
    plt.ylabel("$\Delta$P")
    plt.axhline(y=0,c="black",linewidth=0.5)
    #plt.plot(T_sample,res[1,0,0,0,:])
    
    plt.savefig(p_plots+'P_Deviation_1_5MeV_R_pp.pdf',bbox_inches='tight')
    #plt.savefig(p_plots+'P_Deviation_5MeV_R_pp.pdf',bbox_inches='tight')
    #plt.savefig(p_plots+'P_Deviation_5MeV_n.pdf',bbox_inches='tight')
    #plt.savefig(p_plots+'P_Deviation_15MeV_R_pp.pdf',bbox_inches='tight')
    #plt.savefig(p_plots+'P_Deviation_15MeV_n_pp.pdf',bbox_inches='tight')
    #plt.savefig(p_plots+'P_Deviation_E_001.pdf',bbox_inches='tight')
    #plt.savefig(p_plots+'P_Deviation_E_pp.pdf',bbox_inches='tight')
    
    pass
              


@njit
def main_loop_lin(E):
    E_res = 1500
    n = 10
    max_loop = 10
    E_min = 0.001
    E_d_up = 0.52
    T_threshold = 0.001
    T_trial = 13.
    T_abort = 15.
    T_guess_init = 5.
    T_guess_var = 30.
    
    flag = False
    
    # print("INITIALIZING")
    # print(E)
    # print()

    Es = np.linspace(E_min, E, E_res)
    P_T = D2_cell_photopeak_ratio(E)
    incoh = NaI_incoh_cs(Es)
    photoel = NaI_photoel_cs(Es)
    pair = NaI_pair_cs(Es)
    total = NaI_total_cs(Es)
    compton_E1s = np.zeros(E_res)
    compton_E2s = NaI_compton_cs_E2s( E , Es , incoh[-1] , np.zeros(E_res) )
    
    calc_delta = NaI_pair_cs(E) != 0.
    
    if calc_delta:
        E_r = round( (E // E_d_up) + 1. )
        for i in range(E_res):
            if Es[i] >= E_d_up:
                break
        E_res_d = i*E_r+1
        Es_d = np.linspace(E_min, Es[i], E_res_d)
        
        incoh_d = NaI_incoh_cs(Es_d)
        photoel_d = NaI_photoel_cs(Es_d)
        total_d = NaI_total_cs(Es_d)
        compton_E1s_d = np.zeros(E_res_d)
        
    else:
        E_r = 0
        E_res_d=10
        Es_d = np.linspace(E_min, E_d_up, E_res_d)
        
    S = np.zeros((2,n,E_res))
    Q = np.zeros((2,n))
    C = np.zeros((2,n))
    S_d = np.zeros((2,n,E_res_d))
    Q_d = np.zeros((2,n))
    
    Q[0,0] = photoel[-1] / total[-1]
    S[0,0,:] = compton_E2s / total[-1]
    C[0,0] = pair[-1] / total[-1]
    S_d[0,0,:] = discrete_delta(Es_d, 0.511)

    
    T=T_trial
                
    for iteration in range(max_loop):
        
        for loop in range(1,n):
            exp=np.exp(-total*T)
            #exp_d=np.exp(-total_d*T) #################################################
            
            Q[0,loop]=lin_int_solver(Es,
                                     S[0,loop-1,:] * (1-exp) * photoel / total )
            Q[1,loop]=(lin_int_solver(Es,
                                      S[0,loop-1,:] * (exp) * photoel )
                       +lin_int_solver(Es,
                                       S[1,loop-1,:] * (1-exp) * photoel / total))
            
            C[0,loop] = lin_int_solver(Es, 
                                       S[0,loop-1,:] * (1-exp) * pair / total)
            C[1,loop] = ( lin_int_solver(Es, 
                                         S[0,loop-1,:] * (exp) * pair )
                         + lin_int_solver(Es,
                                          S[1,loop-1,:] * (1-exp) * pair / total) )
            
            for loop2 in range(E_res):
                compton_E1s=NaI_compton_cs_E1s( Es, Es[loop2], incoh, compton_E1s)
                
                S[0,loop,loop2]=lin_int_solver(Es,
                                           S[0,loop-1,:] * (1-exp) * compton_E1s / total)
                S[1,loop,loop2]=(lin_int_solver(Es,
                                            S[0,loop-1,:] * exp * compton_E1s ) 
                              +lin_int_solver(Es,
                                              S[1,loop-1,:] * (1-exp) * compton_E1s / total))
                
        if calc_delta:
            for loop in range(1,n):
                exp_d=np.exp(-total_d*T)
                            
                Q_d[0,loop]=lin_int_solver(Es_d,
                                         S_d[0,loop-1,:] * (1-exp_d) * photoel_d / total_d )
                Q_d[1,loop]=(lin_int_solver(Es_d,
                                          S_d[0,loop-1,:] * (exp_d) * photoel_d )
                           +lin_int_solver(Es_d,
                                           S_d[1,loop-1,:] * (1-exp_d) * photoel_d / total_d))
                
                for loop2 in range(E_res_d):
                    compton_E1s_d=NaI_compton_cs_E1s( Es_d, Es_d[loop2], incoh_d, compton_E1s_d)
                                    
                    S_d[0,loop,loop2]=lin_int_solver(Es_d,
                                               S_d[0,loop-1,:] * (1-exp_d) * compton_E1s_d / total_d)
                    S_d[1,loop,loop2]=(lin_int_solver(Es_d,
                                                S_d[0,loop-1,:] * exp_d * compton_E1s_d ) 
                                  +lin_int_solver(Es_d,
                                                  S_d[1,loop-1,:] * (1-exp_d) * compton_E1s_d / total_d))
        
        
        
        if not np.sum( Q[1,:] )==0:
            dT = ( P_T - np.sum(Q[0,:]) - np.sum(C[0,:]) * (np.sum(Q_d[0,:]))**2 ) / ( np.sum(Q[1,:]) + np.sum(C[1,:]) * (np.sum(Q_d[0,:]))**2 + 2 * np.sum(C[0,:]) * np.sum(Q_d[0,:]) * np.sum(Q_d[1,:]) )
            # print (iteration,T,dT)
        else:
            # print (iteration,T)
            # print("Uh-oh!")
            T=T_guess_init+T_guess_var*np.random.random(1)[0]
            continue

        if abs(dT)<T_threshold:
            print("SUCCESS!",E)
            flag=True
            break
        elif dT<-T:
            T/=2
        else:
            T+=dT
    if not flag:
        print("ABORT!",E)
        T=T_abort
        dT=0
    # print()
    
    return Q, S, dT, T, P_T, C, Q_d, S_d, Es, Es_d, E_r

##################################################
@njit
def given_T(E,T):
    E_res = 1500
    n = 10
    max_loop = 10
    E_min = 0.001
    E_d_up = 0.52
    T_threshold = 0.001
    T_trial = 13.
    T_abort = 15.
    T_guess_init = 5.
    T_guess_var = 30.
    
    flag = False
    
    # print("INITIALIZING")
    # print(E)
    # print()

    Es = np.linspace(E_min, E, E_res)
    P_T = D2_cell_photopeak_ratio(E)
    incoh = NaI_incoh_cs(Es)
    photoel = NaI_photoel_cs(Es)
    pair = NaI_pair_cs(Es)
    total = NaI_total_cs(Es)
    compton_E1s = np.zeros(E_res)
    compton_E2s = NaI_compton_cs_E2s( E , Es , incoh[-1] , np.zeros(E_res) )
    
    calc_delta = NaI_pair_cs(E) != 0.
    
    if calc_delta:
        E_r = round( (E // E_d_up) + 1. )
        for i in range(E_res):
            if Es[i] >= E_d_up:
                break
        E_res_d = i*E_r+1
        Es_d = np.linspace(E_min, Es[i], E_res_d)
        
        incoh_d = NaI_incoh_cs(Es_d)
        photoel_d = NaI_photoel_cs(Es_d)
        total_d = NaI_total_cs(Es_d)
        compton_E1s_d = np.zeros(E_res_d)
        
    else:
        E_r = 0
        E_res_d=10
        Es_d = np.linspace(E_min, E_d_up, E_res_d)
        
    S = np.zeros((2,n,E_res))
    Q = np.zeros((2,n))
    C = np.zeros((2,n))
    S_d = np.zeros((2,n,E_res_d))
    Q_d = np.zeros((2,n))
    
    Q[0,0] = photoel[-1] / total[-1]
    S[0,0,:] = compton_E2s / total[-1]
    C[0,0] = pair[-1] / total[-1]
    S_d[0,0,:] = discrete_delta(Es_d, 0.511)

    
    
                
        
    for loop in range(1,n):
        exp=np.exp(-total*T)
        exp_d=np.exp(-total_d*T)
        
        Q[0,loop]=lin_int_solver(Es,
                                 S[0,loop-1,:] * (1-exp) * photoel / total )
        Q[1,loop]=(lin_int_solver(Es,
                                  S[0,loop-1,:] * (exp) * photoel )
                   +lin_int_solver(Es,
                                   S[1,loop-1,:] * (1-exp) * photoel / total))
        
        C[0,loop] = lin_int_solver(Es, 
                                   S[0,loop-1,:] * (1-exp) * pair / total)
        C[1,loop] = ( lin_int_solver(Es, 
                                     S[0,loop-1,:] * (exp) * pair )
                     + lin_int_solver(Es,
                                      S[1,loop-1,:] * (1-exp) * pair / total) )
        
        for loop2 in range(E_res):
            compton_E1s=NaI_compton_cs_E1s( Es, Es[loop2], incoh, compton_E1s)
            
            S[0,loop,loop2]=lin_int_solver(Es,
                                       S[0,loop-1,:] * (1-exp) * compton_E1s / total)
            S[1,loop,loop2]=(lin_int_solver(Es,
                                        S[0,loop-1,:] * exp * compton_E1s ) 
                          +lin_int_solver(Es,
                                          S[1,loop-1,:] * (1-exp) * compton_E1s / total))
            
    if calc_delta:
        for loop in range(1,n):
            exp_d=np.exp(-total_d*T)
                        
            Q_d[0,loop]=lin_int_solver(Es_d,
                                     S_d[0,loop-1,:] * (1-exp_d) * photoel_d / total_d )
            Q_d[1,loop]=(lin_int_solver(Es_d,
                                      S_d[0,loop-1,:] * (exp_d) * photoel_d )
                       +lin_int_solver(Es_d,
                                       S_d[1,loop-1,:] * (1-exp_d) * photoel_d / total_d))
            
            for loop2 in range(E_res_d):
                compton_E1s_d=NaI_compton_cs_E1s( Es_d, Es_d[loop2], incoh_d, compton_E1s_d)
                                
                S_d[0,loop,loop2]=lin_int_solver(Es_d,
                                           S_d[0,loop-1,:] * (1-exp_d) * compton_E1s_d / total_d)
                S_d[1,loop,loop2]=(lin_int_solver(Es_d,
                                            S_d[0,loop-1,:] * exp_d * compton_E1s_d ) 
                              +lin_int_solver(Es_d,
                                              S_d[1,loop-1,:] * (1-exp_d) * compton_E1s_d / total_d))
        
        
        
       
    # print()
    dT=0
    return Q, S, dT, T, P_T, C, Q_d, S_d, Es, Es_d, E_r


@njit
def calc_count_spectrum(E):
    Q, S, dT, T, P_T, C, Q_d, S_d, Es, Es_d, E_r = main_loop_lin(E)
    
    n = len(Q[0,:])
    
    E_res = len(Es)
    h = (Es[-1]-Es[0]) / (E_res-1)
    E_res_inc = 300 ######################################################################### int( 4*D2_E_sig(E) / h )
    E_res2 = E_res+E_res_inc
    Es2 = np.linspace(Es[0], Es[-1]+E_res_inc*h, E_res2)
    
    Phi = S[0,n-1,:] + dT*S[1,n-1,:]
    
    for i in range(n-1):
        Phi += (S[0,i,:] + dT*S[1,i,:]) * np.exp( -(T+dT) * NaI_total_cs(Es) )
    
    if not E_r==0:
        E_res_d = len(Es_d)
        h_d = (Es_d[-1]-Es_d[0]) / (E_res_d-1)
        E_res_d_b = round(Es_d[0] / h_d) + 3*E_r
        E_res_d_t = round(Es_d[-1] / h_d) + 3*E_r
        E_res3 = E_res_d + E_res_d_b + E_res_d_t
        Es3 = np.linspace( Es_d[0] - E_res_d_b*h_d, Es_d[-1] + E_res_d_t*h_d, E_res3 )
        
        Q_d_s = np.sum( Q_d[0,:] ) + dT*np.sum( Q_d[1,:] )
        
        Phi_d = S_d[0,n-1,:] + dT*S_d[1,n-1,:]
        
        for i in range(n-1):
            Phi_d += (S_d[0,i,:] + dT*S_d[1,i,:]) * np.exp( -(T+dT) * NaI_total_cs(Es_d) )
        
        
        Phi_d_2 = np.zeros(E_res3)
        Phi_d_2[E_res_d_b:E_res_d_b+E_res_d] = Phi_d
            
        Phi_d_2 += discrete_delta(Es3,0.)[:] * Q_d_s
        
        Phi_d_3 = np.zeros(E_res3)
        Phi_d_r = np.zeros(E_res3)
        for i in range(E_res3):
            Phi_d_r[:] = np.zeros(E_res3)
            Phi_d_r[i::-1] = Phi_d_2[:i+1]
            Phi_d_3[i] = lin_int_solver(Es3,Phi_d_r*Phi_d_2)
        
        weights = np.ones(E_res3) * h_d
        weights[0] /= 2
        weights[-1] /= 2
        s_d = 0
        
        for i in range(E_res3):
            s_d += weights[i] * Phi_d_3[i]
            Phi_d_3[i]=0.
            if s_d >= Q_d_s**2:
                break
        
        i_0 = E_res_d_b % E_r
        i_n = (E_res3 - i_0 - 1) // E_r + 1
        i_1 = i_0 + (i_n-1) * E_r
        
        Es4 = np.linspace( Es3[i_0], Es3[i_1], i_n )
        Phi_d_4 = np.zeros( i_n )
        
        if E_r % 2 == 1:
            i_d = E_r//2
            Phi_d_4[0] = np.sum( Phi_d_3[i_0 : i_0 + i_d + 1] ) / (i_d + 1)
            Phi_d_4[-1] = np.sum( Phi_d_3[i_1 - i_d : i_1 + 1] ) / (i_d + 1)
            for i in range(1,i_n-1):
                Phi_d_4[i] = np.sum( Phi_d_3[i_0 + i*E_r - i_d : i_0 + i*E_r + i_d + 1] ) / (2*i_d + 1)
        else:
            i_d = E_r//2
            weights = np.ones(E_r + 1) / E_r
            weights[0] /= 2
            weights[-1] /= 2
            Phi_d_4[0] = np.sum( Phi_d_3[i_0 : i_0 + i_d + 1] * weights[round(E_r/2) : ] )
            Phi_d_4[-1] = np.sum( Phi_d_3[i_1 - i_d : i_1 + 1] * weights[ : round(E_r/2) + 1] )
            for i in range(1,i_n-1):
                Phi_d_4[i] = np.sum( Phi_d_3[i_0 + i*E_r - i_d : i_0 + i*E_r + i_d + 1] * weights[:] )
                
        i_m = E_res_d_b // E_r
        pps = np.sum( C[0,:] ) + dT*np.sum( C[1,:] )
        Phi[:i_n-i_m] += pps*Phi_d_4[i_m:]
    
    e=np.zeros(E_res2)
    for i in range(E_res):
        e[i] = continue_lin( E-Es[i], Es, Phi )
    
    Cc=np.zeros(E_res2)
    B=np.zeros(E_res2)
    for i in range(E_res2):
        for j in range(E_res2):
            B[j] = gauss_sig(Es2[i],Es2[j])
        Cc[i]=lin_int_solver( Es2, B*e )
    Cp=np.zeros(E_res2)
    for i in range(E_res2):
        Cp[i] = gauss_sig(Es2[i], E) * P_T
    Ct=Cc+Cp
    Ct/=lin_int_solver(Es2,Ct)
    return Es2, Ct


@njit(parallel=True)
def calc_cont_spectrum(x_data,y_data):
    E_min=0.5
    samples=300
    E_len_total=1800 ###################################################################################################################################################################
    weights=np.zeros(samples)
    E_samples=np.linspace(E_min,x_data[-1],samples)
    results=np.zeros((2,samples,E_len_total))
    out=np.zeros(len(x_data))
    for i in prange(samples):
        results[0,i,:], results[1,i,:] = calc_count_spectrum(E_samples[i])##############################################################
        weights[i] = continue_lin(E_samples[i], x_data, y_data)
    for i in prange(len(x_data)):
        for j in range(samples):
            out[i] += continue_lin( x_data[i], results[0,j,:], results[1,j,:] ) * weights[j]
    return out

def main_test_psi_i():
    E_samples=[.5]
    for i,E in enumerate(E_samples):
        Q, S, dT, T, P_T, C, Q_d, S_d, Es, Es_d, E_r = main_loop_lin(E)
        for loop in range(len(Q[0,:])):
            Psi=S[0,loop,:]+dT*S[1,loop,:]
            plt.plot(Es,Psi,label=str(loop))
    plt.legend()
    #plt.ylim(0,5)
    #plt.xscale("log")
    #plt.yscale("log")
    plt.ylabel("$\Psi$(i,E)")
    plt.xlabel("Energy [MeV]")
    #plt.savefig(p_plots+'Psi_i_15MeV.pdf',bbox_inches='tight')
    
def plotter():
    E_samples=[0.5,1.5,5.,15.]
    for i,E in enumerate(E_samples):
        Es2, Ct= calc_count_spectrum(E)
        plt.plot(Es2,Ct/np.amax(Ct),label=str(E)+"MeV")
    plt.axhline(y=0,c="black",linewidth=0.5)
    plt.legend()
    plt.xscale("log")
    plt.xlim(0.05)
    # plt.yscale("log")
    plt.ylabel("Normalized Count Spectrum [MeV$^{-1}$]")
    plt.xlabel("Energy [MeV]")
    #plt.savefig(p_plots+'Count_Spectra_pp.pdf',bbox_inches='tight')

def plot_lost_gammas():
    res=100
    E_samples=np.geomspace(0.1,20,res)
    Ns=np.zeros(res)
    Ps=np.zeros(res)
    Cs=np.zeros(res)
    for i,E in enumerate(E_samples):
        Q, S, dT, T, P_T, C, Q_d, S_d, Es, Es_d, E_r = main_loop_lin(E)
        n=len(Q[0,:])
        Ps[i] = np.sum( Q[0,:] ) + dT*np.sum( Q[1,:] )
        Cs[i] = np.sum( C[0,:] ) + dT*np.sum( C[1,:] )
        Phi = S[0,n-1,:] + dT*S[1,n-1,:]
        for j in range(n-1):
            Phi += (S[0,j,:] + dT*S[1,j,:]) * np.exp( -(T+dT) * NaI_total_cs(Es) )
        Ns[i]=lin_int_solver(Es,Phi)
    plt.plot(E_samples,Ns,label="Escaped Photons")
    plt.plot(E_samples,Ps,label="Absorbed Photons")
    plt.plot(E_samples,Cs,label="Pair Creations")
    plt.plot(E_samples,1-Ns-Ps-Cs,label="Missing Photons")

    plt.xscale("log")
    plt.xlabel("Energy [MeV]")
    plt.ylabel("Share of Photons")
    plt.legend()
    #plt.savefig(p_plots+'Missing_Photons_pp.pdf',bbox_inches='tight')

def plot_T():
    fig, ax = plt.subplots()
    res=30
    E_samples=np.geomspace(0.1,20,res)
    Ts=np.zeros(res)
    for i,E in enumerate(E_samples):
        Q, S, dT, Ts[i], P_T, C, Q_d, S_d, Es, Es_d, E_r=main_loop_lin(E)
        if dT==0:
            Ts[i]=float("NaN")
    plt.plot(E_samples,Ts)
    plt.xscale("log")
    plt.xlabel("Energy [MeV]")
    plt.ylabel("T-value")
    secax=ax.secondary_yaxis("right",functions=(lambda d:d/p_NaI,lambda r:r*p_NaI))
    secax.set_ylabel("Characteristic Travel Distance [cm]")
    
    #plt.savefig(p_plots+'T_E_pp.pdf',bbox_inches='tight')
     



p='D:\\MPE\\COMPTEL_Simulation_Project\\Werkstudent\\Data_from_Simulations\\Thesis_Simulations/'

mon_spec=np.array([[ 315954.69789562,  324312.87053643,  332257.29397254,
         338975.252593  ,  344260.57556527,  348327.86191268,
         351492.06673179,  353993.52428176,  355982.30905354,
         357574.74965104,  358876.76401441,  359987.26907207,
         360987.49592413,  361942.02082686,  362904.41930176,
         363917.80777772,  365010.32995992,  366178.03603281,
         367379.75682362,  368545.658283  ,  369612.94644121,
         370555.73202905,  371390.45616988,  372151.06131957,
         372856.50903448,  373479.50278043,  373952.87835585,
         374198.57792703,  374176.94136359,  373922.6294898 ,
         373548.9653503 ,  373228.02121852,  373147.64271647,
         373480.18659521,  374370.6936505 ,  375949.7866376 ,
         378367.64482825,  381828.9070424 ,  386605.27760423,
         393022.64037123,  401429.79743168,  412154.68927124,
         425453.63075595,  441482.92961692,  460269.53947374,
         481698.13711461,  505507.65362333,  531299.39005981,
         558570.09851428,  586742.63932368,  615202.95518946,
         643364.58649981,  670742.47922438,  696950.85438919,
         721833.46530133,  745431.86455983,  768041.74843625,
         790150.89450954,  812393.79684542,  835449.86536434,
         860016.29180259,  886696.73083984,  915964.62836483,
         948135.87798293,  983344.59577755, 1021508.42592648,
        1062342.60058447, 1105346.66955661, 1149859.20606942,
        1195121.11525908, 1240336.31697404, 1284733.50417934,
        1327615.40806754, 1368375.5671853 , 1406424.62216732,
        1441079.70793522, 1471453.92852288, 1496149.01957441,
        1513169.72953269, 1519766.24022405, 1512509.79718449,
        1487640.97352077, 1441638.89866296, 1371952.06688007,
        1277901.86880924, 1161199.71971429, 1026180.57837737,
         879480.18088336,  729156.85755209,  583510.92790887,
         449862.48455292,  333580.66696448,  237577.50466603,
         162320.96804598,  106284.31986902,   66635.59774054,
          39975.25038814,   22930.65245208,   12571.59543414],
       [ 145160.52906012,  153380.45437524,  155449.25111794,
         157490.09259633,  159331.72217264,  161133.11262455,
         163908.52840253,  166585.10301957,  168023.23944564,
         169267.50799039,  169864.52782054,  169588.79692547,
         168130.26306814,  166190.74163362,  164416.12723318,
         162990.99378631,  161977.29649675,  161342.60109034,
         161172.51728918,  161517.11115824,  162101.55711805,
         162978.66668964,  164401.57011269,  165826.46924546,
         167020.68446752,  168819.92292161,  171568.93487798,
         174854.09168603,  178480.31020336,  182599.52635703,
         187374.03380308,  192749.03142428,  198209.47228864,
         203137.63652465,  207235.07345354,  210482.21427217,
         213053.37428416,  215314.29888092,  217610.99949289,
         219978.19674027,  222172.47819389,  224050.727067  ,
         225756.17926283,  227504.07216582,  229374.29568   ,
         231340.15739038,  233383.51538962,  235534.54840057,
         237895.03540125,  240526.66192648,  243330.07536786,
         246100.39200642,  248741.64117404,  251286.76062529,
         253639.06567561,  255448.3478967 ,  256429.42226071,
         256697.64377615,  256664.50229935,  256694.51889378,
         256894.04373247,  257136.26654584,  257206.37096799,
         256938.29915356,  256287.60405252,  255316.33247271,
         254164.26146903,  252974.25045421,  251853.81451801,
         250819.54232461,  249827.56107231,  248816.27394254,
         247742.20320702,  246577.40595002,  245298.48958764,
         243907.3071428 ,  242409.86079229,  240754.41226498,
         238794.70935517,  236329.85019357,  233184.66848433,
         229334.26996014,  224919.39743593,  220262.56976812,
         215776.0660277 ,  211841.9754826 ,  208576.74966539,
         205459.37258167,  200971.1983038 ,  192629.32196432,
         177730.15943732,  154812.75929871,  124992.77759203,
          92089.11414299,   61140.71273956,   36230.15733696,
          19021.8981696 ,    8800.52525355,    3572.92717502],
       [  60049.9531026 ,   67399.41194683,   70537.7222201 ,
          71987.46471075,   72374.278408  ,   71042.75702222,
          70698.29251236,   69791.93257145,   68645.60295297,
          67760.29484099,   66996.57424303,   66596.15363195,
          65455.40151757,   64535.836917  ,   64536.86287739,
          64371.85459025,   64273.80346933,   64248.55011526,
          63669.95260711,   63104.27300074,   62826.41340941,
          62597.26905534,   62487.56518317,   62347.90971629,
          62265.84663905,   62309.39591765,   62382.28686131,
          62349.40709435,   62398.4091643 ,   62521.8553511 ,
          62651.30084987,   62900.97123467,   63218.06255994,
          63292.10291727,   63226.43024611,   63192.40137273,
          63116.71318148,   62981.71235439,   62854.42083097,
          62745.16799904,   62621.87285359,   62594.32331326,
          62662.59963509,   62651.69529916,   62581.99878222,
          62570.36986776,   62578.86251577,   62589.45893066,
          62638.28726551,   62710.93434385,   62762.68671236,
          62789.84747022,   62856.06798407,   63012.49620438,
          63241.89072288,   63500.05053098,   63755.78071585,
          64015.3989929 ,   64301.09141998,   64615.46500571,
          64941.74260242,   65264.92144058,   65584.7031332 ,
          65921.18046371,   66290.91121341,   66672.32850652,
          67029.65508757,   67358.95235283,   67683.00857313,
          68030.4892287 ,   68407.62553466,   68806.97060763,
          69214.40462173,   69626.30420912,   70052.09094797,
          70492.75952049,   70937.35912633,   71386.48594907,
          71868.36326648,   72405.76039047,   73005.95890252,
          73697.38165035,   74559.90554238,   75698.67038606,
          77195.99427617,   79096.04048272,   81424.08466652,
          84206.35748359,   87417.95275547,   90771.30654615,
          93207.58061929,   92485.212508  ,   85809.69304035,
          71872.59516242,   52705.39794031,   33058.8224526 ,
          17445.95752047,    7660.42761254,    2776.63671111]])

def monochromatic_spectrum():
    fig=plt.figure(figsize=(10,12))
    grid=plt.GridSpec(3, 1,hspace=0.12,wspace=0.12)
    pa=fig.add_subplot(grid[:,:])
    pa.spines['top'].set_color('none')
    pa.spines['bottom'].set_color('none')
    pa.spines['left'].set_color('none')
    pa.spines['right'].set_color('none')
    plt.tick_params(axis='both', which='both', bottom=False, top=False, labelbottom=False, right=False, left=False, labelleft=False)
    pa.set_xlabel("Energy [MeV]",labelpad=25)
    pa.set_ylabel("Counts [Counts/Bin]",labelpad=40)
    
    E_samples=(1.5,5.0,15.0)
    
    
    for i,E in enumerate(E_samples):
        print(E)
        ax=fig.add_subplot(grid[i,0])
        
        ax.set_ylabel("{E} MeV".format(E=E),labelpad=7)
        ax.yaxis.set_label_position("right")
        
        d=rd.read_h5py_file( p+"Mono_{E}/".format(E=int(E*1000)), "Mono_{E}_h5".format(E=int(E*1000)) )
        d=rd.cut_selection(d,9,0,True)
        
        E2s = E - d[:,3]/1000
        E2s_r=d[:,1]/1000
        Es = np.linspace(0.5, E*1.05, 100)
        xs = Es[:-1] + (Es[-1]-Es[0])/(len(Es)-1)
        
        n, _ = np.histogram(E2s, bins=Es)
        n_r, _, _ = plt.hist(E2s_r, bins=Es, label="MEGAlib Simulation D2 Counts",color="C0")
        
        out = calc_cont_spectrum(xs, n) # mon_spec[i,:] # 
        a=minimize(fit_func,np.amax(n_r)/np.amax(out),(n_r,out)).x #######################################################################
        
        plt.plot(xs,n*np.sum(out*a)/np.sum(n),lw=2.0,label="D2 Incidence Spectrum",c="C2")
        plt.plot(xs,out*a,lw=2.0,label="D2 Count Spectrum",c="C1")
        if i==0:
            plt.legend()

    plt.savefig(p_plots+'monochromatic_final_spectrum_pp.pdf',bbox_inches='tight')


##########################################################################
@njit
def calc_count_spectrum_T(E,T):
    Q, S, dT, T, P_T, C, Q_d, S_d, Es, Es_d, E_r = given_T(E,T)
    
    n = len(Q[0,:])
    
    E_res = len(Es)
    h = (Es[-1]-Es[0]) / (E_res-1)
    E_res_inc = 300 ######################################################################### int( 4*D2_E_sig(E) / h )
    E_res2 = E_res+E_res_inc
    Es2 = np.linspace(Es[0], Es[-1]+E_res_inc*h, E_res2)
    
    Phi = S[0,n-1,:] + dT*S[1,n-1,:]
    
    for i in range(n-1):
        Phi += (S[0,i,:] + dT*S[1,i,:]) * np.exp( -(T+dT) * NaI_total_cs(Es) )
    
    if not E_r==0:
        E_res_d = len(Es_d)
        h_d = (Es_d[-1]-Es_d[0]) / (E_res_d-1)
        E_res_d_b = round(Es_d[0] / h_d) + 3*E_r
        E_res_d_t = round(Es_d[-1] / h_d) + 3*E_r
        E_res3 = E_res_d + E_res_d_b + E_res_d_t
        Es3 = np.linspace( Es_d[0] - E_res_d_b*h_d, Es_d[-1] + E_res_d_t*h_d, E_res3 )
        
        Q_d_s = np.sum( Q_d[0,:] ) + dT*np.sum( Q_d[1,:] )
        
        Phi_d = S_d[0,n-1,:] + dT*S_d[1,n-1,:]
        
        for i in range(n-1):
            Phi_d += (S_d[0,i,:] + dT*S_d[1,i,:]) * np.exp( -(T+dT) * NaI_total_cs(Es_d) )
        
        
        Phi_d_2 = np.zeros(E_res3)
        Phi_d_2[E_res_d_b:E_res_d_b+E_res_d] = Phi_d
            
        Phi_d_2 += discrete_delta(Es3,0.)[:] * Q_d_s
        
        Phi_d_3 = np.zeros(E_res3)
        Phi_d_r = np.zeros(E_res3)
        for i in range(E_res3):
            Phi_d_r[:] = np.zeros(E_res3)
            Phi_d_r[i::-1] = Phi_d_2[:i+1]
            Phi_d_3[i] = lin_int_solver(Es3,Phi_d_r*Phi_d_2)
        
        weights = np.ones(E_res3) * h_d
        weights[0] /= 2
        weights[-1] /= 2
        s_d = 0
        
        for i in range(E_res3):
            s_d += weights[i] * Phi_d_3[i]
            Phi_d_3[i]=0.
            if s_d >= Q_d_s**2:
                break
        
        i_0 = E_res_d_b % E_r
        i_n = (E_res3 - i_0 - 1) // E_r + 1
        i_1 = i_0 + (i_n-1) * E_r
        
        Es4 = np.linspace( Es3[i_0], Es3[i_1], i_n )
        Phi_d_4 = np.zeros( i_n )
        
        if E_r % 2 == 1:
            i_d = E_r//2
            Phi_d_4[0] = np.sum( Phi_d_3[i_0 : i_0 + i_d + 1] ) / (i_d + 1)
            Phi_d_4[-1] = np.sum( Phi_d_3[i_1 - i_d : i_1 + 1] ) / (i_d + 1)
            for i in range(1,i_n-1):
                Phi_d_4[i] = np.sum( Phi_d_3[i_0 + i*E_r - i_d : i_0 + i*E_r + i_d + 1] ) / (2*i_d + 1)
        else:
            i_d = E_r//2
            weights = np.ones(E_r + 1) / E_r
            weights[0] /= 2
            weights[-1] /= 2
            Phi_d_4[0] = np.sum( Phi_d_3[i_0 : i_0 + i_d + 1] * weights[round(E_r/2) : ] )
            Phi_d_4[-1] = np.sum( Phi_d_3[i_1 - i_d : i_1 + 1] * weights[ : round(E_r/2) + 1] )
            for i in range(1,i_n-1):
                Phi_d_4[i] = np.sum( Phi_d_3[i_0 + i*E_r - i_d : i_0 + i*E_r + i_d + 1] * weights[:] )
                
        i_m = E_res_d_b // E_r
        pps = np.sum( C[0,:] ) + dT*np.sum( C[1,:] )
        Phi[:i_n-i_m] += pps*Phi_d_4[i_m:]
    
    e=np.zeros(E_res2)
    for i in range(E_res):
        e[i] = continue_lin( E-Es[i], Es, Phi )
    
    Cc=np.zeros(E_res2)
    B=np.zeros(E_res2)
    for i in range(E_res2):
        for j in range(E_res2):
            B[j] = gauss_sig(Es2[i],Es2[j])
        Cc[i]=lin_int_solver( Es2, B*e )
    Cp=np.zeros(E_res2)
    for i in range(E_res2):
        Cp[i] = gauss_sig(Es2[i], E) * P_T
    Ct=Cc+Cp
    Ct/=lin_int_solver(Es2,Ct)
    return Es2, Ct

def plotter_T():
    T_samples=[0.1,1,10,100]
    E_samples=[0.5,1.5,5.,15.]





    fig=plt.figure(figsize=(10,12))
    grid=plt.GridSpec(4, 1,hspace=0.12,wspace=0.12)
    pa=fig.add_subplot(grid[:,:])
    pa.spines['top'].set_color('none')
    pa.spines['bottom'].set_color('none')
    pa.spines['left'].set_color('none')
    pa.spines['right'].set_color('none')
    plt.tick_params(axis='both', which='both', bottom=False, top=False, labelbottom=False, right=False, left=False, labelleft=False)
    plt.ylabel("Count Spectrum [MeV$^{-1}$]",labelpad=25)
    plt.xlabel("Energy [MeV]",labelpad=40)
    
    
    
    for i,E in enumerate(E_samples):
        ax=fig.add_subplot(grid[i,0])
        
        ax.set_ylabel("{E} MeV".format(E=E),labelpad=7)
        ax.yaxis.set_label_position("right")
        
        plt.axhline(y=0,c="black",linewidth=0.5)
        
        
        for i,T in enumerate(T_samples):
            Es2, Ct= calc_count_spectrum_T(E,T*p_NaI)
            plt.plot(Es2,Ct,label=str(T)+"cm")
        plt.legend()
    
    plt.savefig(p_plots+'count_spectra_given_T.pdf',bbox_inches='tight')
        













def testa():
    E=1.25
    Q, S, dT, T, P_T, C, Q_d, S_d, Es, Es_d, E_r = main_loop_lin(E)
    
    n = len(Q[0,:])
    
    E_res = len(Es)
    h = (Es[-1]-Es[0]) / (E_res-1)
    E_res_inc = int( 4*D2_E_sig(E) / h )
    E_res2 = E_res+E_res_inc
    Es2 = np.linspace(Es[0], Es[-1]+E_res_inc*h, E_res2)
    
    Phi = S[0,n-1,:] + dT*S[1,n-1,:]
    
    for i in range(n-1):
        Phi += (S[0,i,:] + dT*S[1,i,:]) * np.exp( -(T+dT) * NaI_total_cs(Es) )
    
    
    if not E_r==0:
        E_res_d = len(Es_d)
        h_d = (Es_d[-1]-Es_d[0]) / (E_res_d-1)
        E_res_d_b = round(Es_d[0] / h_d) + 3*E_r
        E_res_d_t = round(Es_d[-1] / h_d) + 3*E_r
        E_res3 = E_res_d + E_res_d_b + E_res_d_t
        Es3 = np.linspace( Es_d[0] - E_res_d_b*h_d, Es_d[-1] + E_res_d_t*h_d, E_res3 )
        
        Q_d_s = np.sum( Q_d[0,:] ) + dT*np.sum( Q_d[1,:] )
        
        Phi_d = S_d[0,n-1,:] + dT*S_d[1,n-1,:]
        
        for i in range(n-1):
            Phi_d += (S_d[0,i,:] + dT*S_d[1,i,:]) * np.exp( -(T+dT) * NaI_total_cs(Es_d) )
        
        
        Phi_d_2 = np.zeros(E_res3)
        Phi_d_2[E_res_d_b:E_res_d_b+E_res_d] = Phi_d
            
        Phi_d_2 += discrete_delta(Es3,0.)[:] * Q_d_s
        
        Phi_d_3 = np.zeros(E_res3)
        Phi_d_r = np.zeros(E_res3)
        for i in range(E_res3):
            Phi_d_r[:] = np.zeros(E_res3)
            Phi_d_r[i::-1] = Phi_d_2[:i+1]
            Phi_d_3[i] = lin_int_solver(Es3,Phi_d_r*Phi_d_2)
        
        weights = np.ones(E_res3) * h_d
        weights[0] /= 2
        weights[-1] /= 2
        s_d = 0
        
        for i in range(E_res3):
            s_d += weights[i] * Phi_d_3[i]
            Phi_d_3[i]=0.
            if s_d >= Q_d_s**2:
                break
        
        i_0 = E_res_d_b % E_r
        i_n = (E_res3 - i_0 - 1) // E_r + 1
        i_1 = i_0 + (i_n-1) * E_r
        
        Es4 = np.linspace( Es3[i_0], Es3[i_1], i_n )
        Phi_d_4 = np.zeros( i_n )
        
        if E_r % 2 == 1:
            i_d = E_r//2
            Phi_d_4[0] = np.sum( Phi_d_3[i_0 : i_0 + i_d + 1] ) / (i_d + 1)
            Phi_d_4[-1] = np.sum( Phi_d_3[i_1 - i_d : i_1 + 1] ) / (i_d + 1)
            for i in range(1,i_n-1):
                Phi_d_4[i] = np.sum( Phi_d_3[i_0 + i*E_r - i_d : i_0 + i*E_r + i_d + 1] ) / (2*i_d + 1)
        else:
            i_d = E_r//2
            weights = np.ones(E_r + 1) / E_r
            weights[0] /= 2
            weights[-1] /= 2
            Phi_d_4[0] = np.sum( Phi_d_3[i_0 : i_0 + i_d + 1] * weights[round(E_r/2) : ] )
            Phi_d_4[-1] = np.sum( Phi_d_3[i_1 - i_d : i_1 + 1] * weights[ : round(E_r/2) + 1] )
            for i in range(1,i_n-1):
                Phi_d_4[i] = np.sum( Phi_d_3[i_0 + i*E_r - i_d : i_0 + i*E_r + i_d + 1] * weights[:] )
                
                
        
        i_m = E_res_d_b // E_r
        pps = np.sum( C[0,:] ) + dT*np.sum( C[1,:] )
        Phi[:i_n-i_m] += pps*Phi_d_4[i_m:]
        
    q = ( np.sum(Q[0,:]) + np.sum(C[0,:]) * (np.sum(Q_d[0,:]))**2 ) + dT*( np.sum(Q[1,:]) + np.sum(C[1,:]) * (np.sum(Q_d[0,:]))**2 + 2 * np.sum(C[0,:]) * np.sum(Q_d[0,:]) * np.sum(Q_d[1,:]) )
        
    plt.plot(Es,Phi)
    plt.plot(Es4,pps*Phi_d_4)
    print(E_r)
    print(Es[:10])
    print(Es4[i_m:i_m + 10])
    print(lin_int_solver(Es3,Phi_d_3))
    print(lin_int_solver(Es4,Phi_d_4))
    plt.ylim(0,1)    

